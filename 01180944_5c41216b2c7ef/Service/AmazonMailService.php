<?php
 namespace Plugin\AmazonPayments\Service; use Eccube\Application; use Eccube\Event\EccubeEvents; use Eccube\Event\EventArgs; class AmazonMailService { public $app; public $BaseInfo; public function __construct(Application $app) { $this->app = $app; $this->BaseInfo = $app['eccube.repository.base_info']->get(); } public function sendOrderMail(\Eccube\Entity\Order $Order, $arrOther) { $MailTemplate = $this->app['eccube.repository.mail_template']->find(1); $body = $this->app->renderView('AmazonPayments/Twig/Mail/amazon_order.twig', array( 'header' => $MailTemplate->getHeader(), 'footer' => $MailTemplate->getFooter(), 'Order' => $Order, 'arrOther' => $arrOther, )); $message = \Swift_Message::newInstance() ->setSubject('[' . $this->BaseInfo->getShopName() . '] ' . $MailTemplate->getSubject()) ->setFrom(array($this->BaseInfo->getEmail01() => $this->BaseInfo->getShopName())) ->setTo(array($Order->getEmail())) ->setBcc($this->BaseInfo->getEmail01()) ->setReplyTo($this->BaseInfo->getEmail03()) ->setReturnPath($this->BaseInfo->getEmail04()) ->setBody($body); $event = new EventArgs( array( 'message' => $message, 'Order' => $Order, 'MailTemplate' => $MailTemplate, 'BaseInfo' => $this->BaseInfo, ), null ); $this->app['eccube.event.dispatcher']->dispatch(EccubeEvents::MAIL_ORDER, $event); $this->app->mail($message); return $message; } } 