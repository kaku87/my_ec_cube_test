<?php
 namespace Plugin\AmazonPayments\Service; use Plugin\AmazonPayments\Entity\AmazonOrder; use Plugin\AmazonPayments\Entity\AmazonTrading; use Plugin\AmazonPayments\Exception\AmazonException; use Plugin\AmazonPayments\Exception\AmazonPaymentException; use Plugin\AmazonPayments\Exception\AmazonSystemException; use Eccube\Application; use Eccube\Common\Constant; use Eccube\Entity\Customer; use Eccube\Entity\CustomerAddress; use Eccube\Entity\MailHistory; use Eccube\Entity\Master\CustomerStatus; use Eccube\Entity\Delivery; use Eccube\Entity\Order; use Eccube\Entity\OrderDetail; use Eccube\Entity\Product; use Eccube\Entity\ProductClass; use Eccube\Entity\ShipmentItem; use Eccube\Entity\Shipping; use Eccube\Exception\CartException; use Eccube\Util\Str; use Symfony\Component\Validator\Constraints as Assert; use Doctrine\DBAL\LockMode; class AmazonShoppingService { public $app; protected $cartService; protected $orderService; protected $BaseInfo; protected $em; private $amazonSettings; private static $area_code = null; public function __construct(Application $app, $cartService, $orderService) { $this->app = $app; $this->cartService = $cartService; $this->orderService = $orderService; $this->BaseInfo = $app['eccube.repository.base_info']->get(); $this->amazonSettings = $app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonSettings(); } public function getOrder($status = null) { $preOrderId = $this->cartService->getPreOrderId(); if (!$preOrderId) { return null; } $condition = array( 'pre_order_id' => $preOrderId, ); if (!is_null($status)) { $condition += array( 'OrderStatus' => $status, ); } $Order = $this->app['eccube.repository.order']->findOneBy($condition); return $Order; } public function createOrder($Customer, $profile) { $preOrderId = sha1(Str::random(32)); $Order = $this->registerPreOrder( $Customer, $profile, $preOrderId); $this->cartService->setPreOrderId($preOrderId); $this->cartService->save(); return $Order; } public function registerPreOrder(Customer $Customer, $profile, $preOrderId) { $this->em = $this->app['orm.em']; $Order = $this->getNewOrder($Customer); if (!$this->app->isGranted('IS_AUTHENTICATED_FULLY')) { $Order->setEmail($profile->email); } $Order->setPreOrderId($preOrderId); $this->em->persist($Order); $deliveries = $this->getDeliveriesCart(); $Order = $this->getNewShipping($Order, $Customer, $deliveries); $Order = $this->getNewDetails($Order); $subTotal = $this->orderService->getSubTotal($Order); $tax = $this->orderService->getTotalTax($Order); $Order->setDeliveryFeeTotal($this->getShippingDeliveryFeeTotal($Order->getShippings())); $Order->setSubTotal($subTotal); $this->setDeliveryFreeAmount($Order); $this->setDeliveryFreeQuantity($Order); $AmazonPayment = $this->app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonPayment(); $payments[0] = $AmazonPayment; if (count($payments) > 0) { $payment = $payments[0]; $Order->setPayment($payment); $Order->setPaymentMethod($payment->getMethod()); $Order->setCharge($payment->getCharge()); } else { $Order->setCharge(0); } $Order->setTax($tax); $total = $subTotal + $Order->getCharge() + $Order->getDeliveryFeeTotal(); $Order->setTotal($total); $Order->setPaymentTotal($total); $this->em->flush(); return $Order; } public function getNewOrder(Customer $Customer) { $Order = $this->newOrder(); $this->copyToOrderFromCustomer($Order, $Customer); return $Order; } public function newOrder() { $OrderStatus = $this->app['eccube.repository.order_status']->find($this->app['config']['order_processing']); $Order = new \Eccube\Entity\Order($OrderStatus); return $Order; } public function copyToOrderFromCustomer(Order $Order, Customer $Customer = null) { if (empty($Customer)) { return $Order; } if ($Customer->getId()) { $Order->setCustomer($Customer); } $Order ->setName01($Customer->getName01()) ->setName02($Customer->getName02()) ->setKana01($Customer->getKana01()) ->setKana02($Customer->getKana02()) ->setCompanyName($Customer->getCompanyName()) ->setEmail($Customer->getEmail()) ->setTel01($Customer->getTel01()) ->setTel02($Customer->getTel02()) ->setTel03($Customer->getTel03()) ->setFax01($Customer->getFax01()) ->setFax02($Customer->getFax02()) ->setFax03($Customer->getFax03()) ->setZip01($Customer->getZip01()) ->setZip02($Customer->getZip02()) ->setZipCode($Customer->getZip01() . $Customer->getZip02()) ->setPref($Customer->getPref()) ->setAddr01($Customer->getAddr01()) ->setAddr02($Customer->getAddr02()) ->setSex($Customer->getSex()) ->setBirth($Customer->getBirth()) ->setJob($Customer->getJob()); return $Order; } public function getDeliveriesCart() { $productTypes = $this->cartService->getProductTypes(); return $this->getDeliveries($productTypes); } public function getDeliveriesOrder(Order $Order) { $productTypes = $this->orderService->getProductTypes($Order); return $this->getDeliveries($productTypes); } public function getDeliveries($productTypes) { $AmazonPayment = $this->app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonPayment(); $payments = array($AmazonPayment); $deliveries = $this->app['eccube.repository.delivery']->findAllowedDeliveries($productTypes, $payments); return $deliveries; } public function getNewShipping(Order $Order, Customer $Customer, $deliveries) { $productTypes = array(); foreach ($deliveries as $Delivery) { if (!in_array($Delivery->getProductType()->getId(), $productTypes)) { $Shipping = new Shipping(); $this->copyToShippingFromCustomer($Shipping, $Customer) ->setOrder($Order) ->setDelFlg(Constant::DISABLED); $this->setShippingDeliveryFee($Shipping, $Delivery); $this->em->persist($Shipping); $Order->addShipping($Shipping); $productTypes[] = $Delivery->getProductType()->getId(); } } return $Order; } public function copyToShippingFromCustomer(Shipping $Shipping, Customer $Customer = null) { if (is_null($Customer)) { return $Shipping; } $CustomerAddress = $this->app['eccube.repository.customer_address']->findOneBy( array('Customer' => $Customer), array('id' => 'ASC') ); if (!is_null($CustomerAddress)) { $Shipping ->setName01($CustomerAddress->getName01()) ->setName02($CustomerAddress->getName02()) ->setKana01($CustomerAddress->getKana01()) ->setKana02($CustomerAddress->getKana02()) ->setCompanyName($CustomerAddress->getCompanyName()) ->setTel01($CustomerAddress->getTel01()) ->setTel02($CustomerAddress->getTel02()) ->setTel03($CustomerAddress->getTel03()) ->setFax01($CustomerAddress->getFax01()) ->setFax02($CustomerAddress->getFax02()) ->setFax03($CustomerAddress->getFax03()) ->setZip01($CustomerAddress->getZip01()) ->setZip02($CustomerAddress->getZip02()) ->setZipCode($CustomerAddress->getZip01() . $CustomerAddress->getZip02()) ->setPref($CustomerAddress->getPref()) ->setAddr01($CustomerAddress->getAddr01()) ->setAddr02($CustomerAddress->getAddr02()); } else { $Shipping ->setName01($Customer->getName01()) ->setName02($Customer->getName02()) ->setKana01($Customer->getKana01()) ->setKana02($Customer->getKana02()) ->setCompanyName($Customer->getCompanyName()) ->setTel01($Customer->getTel01()) ->setTel02($Customer->getTel02()) ->setTel03($Customer->getTel03()) ->setFax01($Customer->getFax01()) ->setFax02($Customer->getFax02()) ->setFax03($Customer->getFax03()) ->setZip01($Customer->getZip01()) ->setZip02($Customer->getZip02()) ->setZipCode($Customer->getZip01() . $Customer->getZip02()) ->setPref($Customer->getPref()) ->setAddr01($Customer->getAddr01()) ->setAddr02($Customer->getAddr02()); } return $Shipping; } public function getNewDetails(Order $Order) { foreach ($this->cartService->getCart()->getCartItems() as $item) { $ProductClass = $item->getObject(); $Product = $ProductClass->getProduct(); $quantity = $item->getQuantity(); $OrderDetail = $this->getNewOrderDetail($Product, $ProductClass, $quantity); $OrderDetail->setOrder($Order); $Order->addOrderDetail($OrderDetail); $this->getNewShipmentItem($Order, $Product, $ProductClass, $quantity); } return $Order; } public function getNewOrderDetail(Product $Product, ProductClass $ProductClass, $quantity) { $OrderDetail = new OrderDetail(); $TaxRule = $this->app['eccube.repository.tax_rule']->getByRule($Product, $ProductClass); $OrderDetail->setProduct($Product) ->setProductClass($ProductClass) ->setProductName($Product->getName()) ->setProductCode($ProductClass->getCode()) ->setPrice($ProductClass->getPrice02()) ->setQuantity($quantity) ->setTaxRule($TaxRule->getCalcRule()->getId()) ->setTaxRate($TaxRule->getTaxRate()); $ClassCategory1 = $ProductClass->getClassCategory1(); if (!is_null($ClassCategory1)) { $OrderDetail->setClasscategoryName1($ClassCategory1->getName()); $OrderDetail->setClassName1($ClassCategory1->getClassName()->getName()); } $ClassCategory2 = $ProductClass->getClassCategory2(); if (!is_null($ClassCategory2)) { $OrderDetail->setClasscategoryName2($ClassCategory2->getName()); $OrderDetail->setClassName2($ClassCategory2->getClassName()->getName()); } $this->em->persist($OrderDetail); return $OrderDetail; } public function getNewShipmentItem(Order $Order, Product $Product, ProductClass $ProductClass, $quantity) { $ShipmentItem = new ShipmentItem(); $shippings = $Order->getShippings(); $Shipping = null; foreach ($shippings as $s) { if ($s->getDelivery()->getProductType()->getId() == $ProductClass->getProductType()->getId()) { $Shipping = $s; break; } } if (is_null($Shipping)) { throw new CartException('shopping.delivery.not.producttype'); } $productDeliveryFeeTotal = 0; if (!is_null($this->BaseInfo->getOptionProductDeliveryFee())) { $productDeliveryFeeTotal = $ProductClass->getDeliveryFee() * $quantity; } $Shipping->setShippingDeliveryFee($Shipping->getShippingDeliveryFee() + $productDeliveryFeeTotal); $ShipmentItem->setShipping($Shipping) ->setOrder($Order) ->setProductClass($ProductClass) ->setProduct($Product) ->setProductName($Product->getName()) ->setProductCode($ProductClass->getCode()) ->setPrice($ProductClass->getPrice02()) ->setQuantity($quantity); $ClassCategory1 = $ProductClass->getClassCategory1(); if (!is_null($ClassCategory1)) { $ShipmentItem->setClasscategoryName1($ClassCategory1->getName()); $ShipmentItem->setClassName1($ClassCategory1->getClassName()->getName()); } $ClassCategory2 = $ProductClass->getClassCategory2(); if (!is_null($ClassCategory2)) { $ShipmentItem->setClasscategoryName2($ClassCategory2->getName()); $ShipmentItem->setClassName2($ClassCategory2->getClassName()->getName()); } $Shipping->addShipmentItem($ShipmentItem); $this->em->persist($ShipmentItem); return $ShipmentItem; } public function getShippingDeliveryFeeTotal($shippings) { $deliveryFeeTotal = 0; foreach ($shippings as $Shipping) { $deliveryFeeTotal += $Shipping->getShippingDeliveryFee(); } return $deliveryFeeTotal; } public function getProductDeliveryFee(Shipping $Shipping) { $productDeliveryFeeTotal = 0; $shipmentItems = $Shipping->getShipmentItems(); foreach ($shipmentItems as $ShipmentItem) { $productDeliveryFeeTotal += $ShipmentItem->getProductClass()->getDeliveryFee() * $ShipmentItem->getQuantity(); } return $productDeliveryFeeTotal; } public function getAmount(Order $Order) { $shippings = $Order->getShippings(); $Order->setDeliveryFeeTotal($this->getShippingDeliveryFeeTotal($shippings)); $this->setDeliveryFreeAmount($Order); $this->setDeliveryFreeQuantity($Order); $total = $Order->getSubTotal() + $Order->getCharge() + $Order->getDeliveryFeeTotal(); $Order->setTotal($total); $Order->setPaymentTotal($total); $this->app['orm.em']->flush(); return $Order; } public function setShippingDeliveryFee(Shipping $Shipping, Delivery $Delivery = null) { if (is_null($Delivery)) { $Delivery = $Shipping->getDelivery(); } $Pref = $Shipping->getPref(); if (empty($Pref)) { $Pref = $this->app['eccube.repository.master.pref']->find(13); } $deliveryFee = $this->app['eccube.repository.delivery_fee']->findOneBy(array('Delivery' => $Delivery, 'Pref' =>$Pref)) ; $Shipping->setDeliveryFee($deliveryFee); $Shipping->setDelivery($Delivery); $productDeliveryFeeTotal = 0; if (!is_null($this->BaseInfo->getOptionProductDeliveryFee())) { $productDeliveryFeeTotal += $this->getProductDeliveryFee($Shipping); } $Shipping->setShippingDeliveryFee($deliveryFee->getFee() + $productDeliveryFeeTotal); $Shipping->setShippingDeliveryName($Delivery->getName()); } public function setDeliveryFreeAmount(Order $Order) { $deliveryFreeAmount = $this->BaseInfo->getDeliveryFreeAmount(); if (!is_null($deliveryFreeAmount)) { if ($Order->getSubTotal() >= $deliveryFreeAmount) { $Order->setDeliveryFeeTotal(0); $shippings = $Order->getShippings(); foreach ($shippings as $Shipping) { $Shipping->setShippingDeliveryFee(0); } } } } public function setDeliveryFreeQuantity(Order $Order) { $deliveryFreeQuantity = $this->BaseInfo->getDeliveryFreeQuantity(); if (!is_null($deliveryFreeQuantity)) { if ($this->orderService->getTotalQuantity($Order) >= $deliveryFreeQuantity) { $Order->setDeliveryFeeTotal(0); $shippings = $Order->getShippings(); foreach ($shippings as $Shipping) { $Shipping->setShippingDeliveryFee(0); } } } } public function isOrderProduct($em, \Eccube\Entity\Order $Order) { $orderDetails = $Order->getOrderDetails(); foreach ($orderDetails as $orderDetail) { if ($orderDetail->getProduct()->getStatus()->getId() != \Eccube\Entity\Master\Disp::DISPLAY_SHOW) { return false; } if (!is_null($orderDetail->getProductClass()->getSaleLimit())) { if ($orderDetail->getQuantity() > $orderDetail->getProductClass()->getSaleLimit()) { return false; } } } foreach ($orderDetails as $orderDetail) { if ($orderDetail->getProductClass()->getStockUnlimited() == Constant::DISABLED) { $productStock = $em->getRepository('Eccube\Entity\ProductStock')->find( $orderDetail->getProductClass()->getProductStock()->getId(), LockMode::PESSIMISTIC_WRITE ); if ($orderDetail->getQuantity() > $productStock->getStock()) { return false; } } } return true; } public function setOrderUpdate(Order $Order, $data) { $Order->setOrderDate(new \DateTime()); $Order->setOrderStatus($this->app['eccube.repository.order_status']->find($this->app['config']['order_new'])); $Order->setMessage($data['message']); $shippings = $data['shippings']; foreach ($shippings as $Shipping) { $Delivery = $Shipping->getDelivery(); $deliveryFee = $this->app['eccube.repository.delivery_fee']->findOneBy(array( 'Delivery' => $Delivery, 'Pref' => $Shipping->getPref() )); $deliveryTime = $Shipping->getDeliveryTime(); if (!empty($deliveryTime)) { $Shipping->setShippingDeliveryTime($deliveryTime->getDeliveryTime()); } $Shipping->setDeliveryFee($deliveryFee); $productDeliveryFeeTotal = 0; if (!is_null($this->BaseInfo->getOptionProductDeliveryFee())) { $productDeliveryFeeTotal += $this->getProductDeliveryFee($Shipping); } $Shipping->setShippingDeliveryFee($deliveryFee->getFee() + $productDeliveryFeeTotal); $Shipping->setShippingDeliveryName($Delivery->getName()); } $this->setDeliveryFreeAmount($Order); $this->setDeliveryFreeQuantity($Order); } public function setStockUpdate($em, Order $Order) { $orderDetails = $Order->getOrderDetails(); foreach ($orderDetails as $orderDetail) { if ($orderDetail->getProductClass()->getStockUnlimited() == Constant::DISABLED) { $productStock = $em->getRepository('Eccube\Entity\ProductStock')->find( $orderDetail->getProductClass()->getProductStock()->getId() ); $stock = $productStock->getStock() - $orderDetail->getQuantity(); $productStock->setStock($stock); $orderDetail->getProductClass()->setStock($stock); } } } public function setCustomerUpdate(Order $Order, Customer $user) { $orderDetails = $Order->getOrderDetails(); $now = new \DateTime(); $firstBuyDate = $user->getFirstBuyDate(); if (empty($firstBuyDate)) { $user->setFirstBuyDate($now); } $user->setLastBuyDate($now); $user->setBuyTimes($user->getBuyTimes() + 1); $user->setBuyTotal($user->getBuyTotal() + $Order->getTotal()); } public function getFormDeliveryDates(Order $Order) { $minDate = 0; $deliveryDateFlag = false; foreach ($Order->getOrderDetails() as $detail) { $deliveryDate = $detail->getProductClass()->getDeliveryDate(); if (!is_null($deliveryDate)) { if ($minDate < $deliveryDate->getValue()) { $minDate = $deliveryDate->getValue(); } $deliveryDateFlag = true; } } $deliveryDates = array(); if ($deliveryDateFlag) { $period = new \DatePeriod ( new \DateTime($minDate . ' day'), new \DateInterval('P1D'), new \DateTime($minDate + $this->app['config']['deliv_date_end_max'] . ' day') ); foreach ($period as $day) { $deliveryDates[$day->format('Y/m/d')] = $day->format('Y/m/d'); } } return $deliveryDates; } public function getShippingFormBuilder(Order $Order) { $message = $Order->getMessage(); $AmazonPayment = $this->app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonPayment(); $payments[0] = $AmazonPayment; $builder = $this->app['form.factory']->createBuilder('amazon_shopping', null, array( 'payments' => $payments, 'payment' => $Order->getPayment(), 'message' => $message, )); $builder ->add('shippings', 'collection', array( 'type' => 'amazon_shipping_item', 'data' => $Order->getShippings(), )); return $builder; } public function processPurchase(Order $Order) { $em = $this->app['orm.em']; $this->calculatePrice($Order); $check = $this->isOrderProduct($em, $Order); if (!$check) { throw new ShoppingException('front.shopping.stock.error'); } $Order = $this->calculateDeliveryFee($Order); $this->setOrderUpdateData($Order); $this->setStockUpdate($em, $Order); if ($this->app->isGranted('ROLE_USER')) { $this->setCustomerUpdate($Order, $this->app->user()); } } public function sendOrderMail(Order $Order, $arrOther) { $message = $this->app['eccube.plugin.amazonpayments.service.amazon_mail']->sendOrderMail($Order, $arrOther); $MailTemplate = $this->app['eccube.repository.mail_template']->find(1); $MailHistory = new MailHistory(); $MailHistory ->setSubject($message->getSubject()) ->setMailBody($message->getBody()) ->setMailTemplate($MailTemplate) ->setSendDate(new \DateTime()) ->setOrder($Order); $this->app['orm.em']->persist($MailHistory); $this->app['orm.em']->flush($MailHistory); return $MailHistory; } public function convertAddress(Order $Order, Shipping $Shipping, $arrAmznAddr) { if (strpos($arrAmznAddr['PostalCode'], '-') !== false) { $arrPostalCode = explode('-', $arrAmznAddr['PostalCode']); } else { preg_match('/(\d{3})(\d{4})/', $arrAmznAddr['PostalCode'], $arrPostalCode); unset($arrPostalCode[0]); $arrPostalCode = array_values($arrPostalCode); } $Shipping->setZip01($arrPostalCode[0]) ->setZip02($arrPostalCode[1]) ->setZipCode($arrPostalCode[0] . $arrPostalCode[1]); $arrName = $this->divideName($arrAmznAddr['Name']); $Shipping->setName01($arrName['name01']) ->setName02($arrName['name02']); if ($this->amazonSettings['order_revise'] == 1) { $arrFixKana = $this->reviseKana($Shipping->getName01(), $Shipping->getName02(), $Order->getEmail()); if (!empty($arrFixKana)) { $Shipping->setKana01($arrFixKana['kana01']) ->setKana02($arrFixKana['kana02']); } } switch ($arrAmznAddr['StateOrRegion']) { case "東京": $arrAmznAddr['StateOrRegion'] = "東京都"; break; case "大阪": $arrAmznAddr['StateOrRegion'] = "大阪府"; break; case "京都": $arrAmznAddr['StateOrRegion'] = "京都府"; break; case "東京都": break; case "大阪府": break; case "京都府": break; case "北海道": break; default: if (!preg_match('/県$/u', $arrAmznAddr['StateOrRegion'])) { $arrAmznAddr['StateOrRegion'] .= '県'; } } $convertAmznAddr1 = mb_convert_kana($arrAmznAddr['AddressLine1'], 'n', 'utf-8'); $convertAmznAddr2 = mb_convert_kana($arrAmznAddr['AddressLine2'], 'n', 'utf-8'); if (preg_match("/[0-9]/", $convertAmznAddr1, $matches, PREG_OFFSET_CAPTURE)) { $offset = strlen(substr($convertAmznAddr1, 0, $matches[0][1])); $AddressLine1Front = mb_substr($convertAmznAddr1, 0, $offset); $AddressLine1End = mb_substr($convertAmznAddr1, $offset); $addr01 = $arrAmznAddr['City'] . $AddressLine1Front; $addr02 = $AddressLine1End . $convertAmznAddr2; } else { $addr01 = $arrAmznAddr['City'] . $convertAmznAddr1; $addr02 = $convertAmznAddr2; } if ($arrAmznAddr['AddressLine3'] != '') { $addr02 .= " ".$arrAmznAddr['AddressLine3']; } $Pref = $this->app['eccube.repository.master.pref']->findOneBy(array('name' => $arrAmznAddr['StateOrRegion'])); if (!empty($Pref)) { $Shipping->setPref($Pref); } else { $this->app['monolog.amazonpayments']->addInfo('*** 都道府県マッチングエラー *** addr = '.print_r($arrAmznAddr, true)); $Shipping->setPref(null); $addr01 = $arrAmznAddr['StateOrRegion'] . $addr01; } $Shipping->setAddr01($addr01) ->setAddr02($addr02); $arrTel = $this->divideTel($arrAmznAddr['Phone']); $Shipping->setTel01($arrTel['tel01']) ->setTel02($arrTel['tel02']) ->setTel03($arrTel['tel03']); $Shipping->setDelFlg(Constant::DISABLED); } public function divideName($name) { $arrResult = array(); $arrName = preg_split('/[ 　]+/u', $name); if (count($arrName) == 2) { $arrResult['name01'] = $arrName[0]; $arrResult['name02'] = $arrName[1]; } else { if ($this->amazonSettings['order_revise'] == 1) { $arrFixName = $this->reviseName($name); } if (!empty($arrFixName)) { $arrResult = $arrFixName; $this->app['monolog.amazonpayments']->addInfo('*** 名前補正 ***'); } else { $arrResult['name01'] = $name; $arrResult['name02'] = '　'; } } return $arrResult; } public function divideTel($tel) { $arrResult = array(); if (mb_substr_count($tel, '-') == 2) { $arrTel = explode('-', $tel); $arrResult['tel01'] = $arrTel[0]; $arrResult['tel02'] = $arrTel[1]; $arrResult['tel03'] = $arrTel[2]; } else { $arrFixTel = array(); if ($this->amazonSettings['order_revise'] == 1) { $arrFixTel = $this->reviseTel($tel); } if (empty($arrFixTel)) { $tel = preg_replace('/[^\d]++/', '', $tel); $fixTel = $this->correctFormatPhoneNumber($tel); if (mb_substr_count($fixTel, '-') == 2) { $arrFixTel = explode('-', $fixTel); $arrFixTel['tel01'] = $arrFixTel[0]; $arrFixTel['tel02'] = $arrFixTel[1]; $arrFixTel['tel03'] = $arrFixTel[2]; } if (empty($arrFixTel) && strlen($tel) >= 3) { $size = ceil(strlen($tel) / 3); $arrPhone = array_chunk(str_split($tel), $size); foreach ($arrPhone as $key => $number) { $key += 1; $arrFixTel["tel0$key"] = implode($number); } } } if (!empty($arrFixTel)) { $arrResult = $arrFixTel; $this->app['monolog.amazonpayments']->addInfo('*** 電話番号補正 ***'); } else { $arrResult['tel01'] = $tel; $arrResult['tel02'] = ''; $arrResult['tel03'] = ''; } } return $arrResult; } public function copyToOrderFromShipping(Order $Order, Shipping $Shipping) { $Order ->setName01($Shipping->getName01()) ->setName02($Shipping->getName02()) ->setTel01($Shipping->getTel01()) ->setTel02($Shipping->getTel02()) ->setTel03($Shipping->getTel03()) ->setZip01($Shipping->getZip01()) ->setZip02($Shipping->getZip02()) ->setZipCode($Shipping->getZip01() . $Shipping->getZip02()) ->setPref($Shipping->getPref()) ->setAddr01($Shipping->getAddr01()) ->setAddr02($Shipping->getAddr02()); } public function requestOrderToAmazon(Order $Order, $amazonOrderReferenceId) { $r = $this->app['eccube.plugin.amazonpayments.service.amazon_request']->setOrderReferenceDetails($amazonOrderReferenceId, $Order->getId(), $Order->getPaymentTotal(), $this->BaseInfo->getShopName()); if ($r === false) { $this->app['monolog.amazonpayments']->addInfo("SetOrderReferenceDetails amazonOrderReferenceId=".$amazonOrderReferenceId); throw new AmazonException(); } $r = $this->confirmAmazonOrder($Order, $amazonOrderReferenceId); $amazonTradingId = $this->app['eccube.plugin.amazonpayments.service.amazon_request']->sfGetXMLTagValue($r, 'AMAZONAUTHORIZATIONID'); return $amazonTradingId; } private function confirmAmazonOrder(Order $Order, $amazonOrderReferenceId, $count = 1) { $r = $this->app['eccube.plugin.amazonpayments.service.amazon_request']->confirmOrderReference($amazonOrderReferenceId); if ($r == $this->app['config']['AmazonPayments']['const']['PAYMENT_METHOD_NOT_ALLOWED']) { $this->app['monolog.amazonpayments']->addError("PaymentMethodNotAllowed: ConfirmOrderReference amazonOrderReferenceId=".$amazonOrderReferenceId); throw new AmazonPaymentException(); } else if ($r === false) { $this->app['monolog.amazonpayments']->addError("AmazonError: ConfirmOrderReference amazonOrderReferenceId=".$amazonOrderReferenceId); throw new AmazonException(); } $order_id = $Order->getId(); if (1 < $count) { $order_id .= '_RETRY' . $count; } $r = $this->app['eccube.plugin.amazonpayments.service.amazon_request']->authorize($amazonOrderReferenceId, $order_id, $Order->getPaymentTotal()); if ($r === 'SoftDecline') { if ($this->app['config']['AmazonPayments']['const']['AUTHORIZE_LIMIT'] <= $count) { $this->app['monolog.amazonpayments']->addInfo('Number of times Authorize retry excess.'); $this->app['monolog.amazonpayments']->addError("Authorize amazonOrderReferenceId=".$amazonOrderReferenceId); throw new AmazonException(); } else { $this->app['monolog.amazonpayments']->addInfo('Authorize retry. count = ' . $count); $r = self::confirmAmazonOrder($Order, $amazonOrderReferenceId, $count + 1); } } else if ($r == $this->app['config']['AmazonPayments']['const']['INVALID_PAYMENT_METHOD'] || $r == $this->app['config']['AmazonPayments']['const']['AMAZON_REJECTED'] || $r == $this->app['config']['AmazonPayments']['const']['TRANSACTION_TIMEDOUT'] || $r === false) { $this->app['monolog.amazonpayments']->addError("Authorize amazonOrderReferenceId=".$amazonOrderReferenceId); if ($r == $this->app['config']['AmazonPayments']['const']['INVALID_PAYMENT_METHOD']) { $cancelResponse = $this->app['eccube.plugin.amazonpayments.service.amazon_request']->cancelOrderReference($amazonOrderReferenceId); $this->app['monolog.amazonpayments']->addInfo('Cancel requested was sent because an error occurred. Response=>' . print_r($cancelResponse, true)); throw new AmazonPaymentException(); } else if ($r == $this->app['config']['AmazonPayments']['const']['AMAZON_REJECTED']) { throw new AmazonPaymentException(); } else if ($r == $this->app['config']['AmazonPayments']['const']['TRANSACTION_TIMEDOUT']) { $cancelResponse = $this->app['eccube.plugin.amazonpayments.service.amazon_request']->cancelOrderReference($amazonOrderReferenceId); $this->app['monolog.amazonpayments']->addInfo('Cancel requested was sent because an error occurred. Response=>' . print_r($cancelResponse, true)); throw new AmazonSystemException(); } else { throw new AmazonException(); } } return $r; } public function setAmazonOrder(Order $Order, $amazonTradingId) { $AmazonOrder = new AmazonOrder(); $AmazonOrder->setOrder($Order); $amazonReferenceId = substr($amazonTradingId, 0, strrpos($amazonTradingId, '-')); $AmazonOrder->setReferenceCode($amazonReferenceId); $AmazonStatus = $this->app['eccube.plugin.amazonpayments.repository.amazon_status']->find($this->amazonSettings['sale']); $AmazonOrder->setAmazonStatus($AmazonStatus); $payment_total = $Order->getPaymentTotal(); if ($payment_total * 0.15 > $this->app['config']['AmazonPayments']['const']['MAX_BILLABLE_AMOUNT']) { $billableAmount = $payment_total + $this->app['config']['AmazonPayments']['const']['MAX_BILLABLE_AMOUNT']; } else { $billableAmount = floor($payment_total * 1.15); } if ($AmazonStatus->getName() == '売上') { $AmazonOrder->setBillableAmount($billableAmount - $payment_total); } else { $AmazonOrder->setBillableAmount($billableAmount); } $AmazonTrading = new AmazonTrading(); $AmazonTrading->setAmazonOrder($AmazonOrder); $AmazonTrading->setTradingCode($amazonTradingId); $AmazonTrading->setAuthoriAmount($payment_total); if ($AmazonStatus->getName() == '売上') { $AmazonTrading->setCaptureAmount($payment_total); } else { $AmazonTrading->setCaptureAmount(0); } $AmazonTrading->setRefundCount(0); $AmazonOrder->addAmazonTrading($AmazonTrading); $this->app['orm.em']->persist($AmazonOrder); $this->app['orm.em']->persist($AmazonTrading); $this->app['orm.em']->flush(); } public function registerCustomer(Order $Order, $data, $profile) { $customerRegFlg = empty($data['customer_regist']) ? false : true; $softDeleteFilter = $this->app['orm.em']->getFilters()->getFilter('soft_delete'); $softDeleteFilter->setExcludes(array( 'Eccube\Entity\Customer' )); $Customer = $this->app['eccube.repository.customer']->findOneBy(array('email' => $Order->getEmail())); $del_flg = ''; if (!empty($Customer)) { $del_flg = $Customer->getDelFlg(); } $AmazonCustomer = $this->app['eccube.plugin.amazonpayments.repository.amazon_customer']->findOneBy(array('amazon_user_id' => $profile->user_id)); if ((empty($Customer) || $del_flg == 1) && (empty($AmazonCustomer) || $del_flg == 0) && $customerRegFlg === true) { $this->app['monolog.amazonpayments']->addInfo('*** 会員登録処理 start ***'); $Customer = $this->app['eccube.repository.customer']->newCustomer(); $Customer->setSalt( $this->app['eccube.repository.customer'] ->createSalt(5) ); $password = $this->app['eccube.plugin.amazonpayments.service.amazon_shopping']->createPassword(); $Customer->setPassword($password); $Customer->setPassword( $this->app['eccube.repository.customer']->encryptPassword($this->app, $Customer) ); $Customer->setSecretKey( $this->app['eccube.repository.customer']->getUniqueSecretKey($this->app) ); $CustomerStatus = $this->app['eccube.repository.customer_status']->find(CustomerStatus::ACTIVE); $Customer->setName01($Order->getName01()) ->setName02($Order->getName02()) ->setZip01($Order->getZip01()) ->setZip02($Order->getZip02()) ->setZipcode($Order->getZip01() . $Order->getZip02()) ->setEmail($Order->getEmail()) ->setPref($Order->getPref()) ->setAddr01($Order->getAddr01()) ->setAddr02($Order->getAddr02()) ->setTel01($Order->getTel01()) ->setTel02($Order->getTel02()) ->setTel03($Order->getTel03()) ->setStatus($CustomerStatus) ->setDelFlg(Constant::DISABLED); $CustomerAddress = new \Eccube\Entity\CustomerAddress(); $CustomerAddress->setName01($Customer->getName01()) ->setName02($Customer->getName02()) ->setZip01($Customer->getZip01()) ->setZip02($Customer->getZip02()) ->setZipcode($Customer->getZip01() . $Customer->getZip02()) ->setPref($Customer->getPref()) ->setAddr01($Customer->getAddr01()) ->setAddr02($Customer->getAddr02()) ->setTel01($Customer->getTel01()) ->setTel02($Customer->getTel02()) ->setTel03($Customer->getTel03()) ->setDelFlg(Constant::DISABLED) ->setCustomer($Customer); $this->app['orm.em']->persist($Customer); $this->app['orm.em']->persist($CustomerAddress); $this->app['orm.em']->flush(); $MailMagazinePlugin = $this->app['eccube.repository.plugin']->findBy(array('code' => 'MailMagazine', 'enable' => 1)); if (!empty($MailMagazinePlugin)) { $MailmagaCustomer = new \Plugin\MailMagazine\Entity\MailmagaCustomer(); $mailmagaFlg = empty($data['mail_magazine']) ? 0 : 1; $MailmagaCustomer->setCustomerId($Customer->getId()); $MailmagaCustomer->setDelFlg(Constant::DISABLED); $MailmagaCustomer->setCreateDate(new \DateTime()); $MailmagaCustomer->setMailmagaFlg($mailmagaFlg); $MailmagaCustomer->setUpdateDate(new \DateTime()); $this->app['orm.em']->persist($MailmagaCustomer); } $PostCarrierPlugin = $this->app['eccube.repository.plugin']->findBy(array('code' => 'PostCarrier', 'enable' => 1)); if (!empty($PostCarrierPlugin)) { $PostCarrierCustomer = new \Plugin\PostCarrier\Entity\PostCarrierMailmagaCustomer(); $mailmagaFlg = empty($data['mail_magazine']) ? 0 : 1; $PostCarrierCustomer->setCustomerId($Customer->getId()); $PostCarrierCustomer->setDelFlg(Constant::DISABLED); $PostCarrierCustomer->setCreateDate(new \DateTime()); $PostCarrierCustomer->setMailmagaFlg($mailmagaFlg); $PostCarrierCustomer->setUpdateDate(new \DateTime()); $this->app['orm.em']->persist($PostCarrierCustomer); } $Order->setCustomer($Customer); $this->app['orm.em']->persist($Order); $result = array(); $result['title']['name'] = ''; $result['title']['value'] = '会員登録'; $result['tmp']['name'] = 'マイページURL'; $result['tmp']['value'] = $this->app->url('mypage'); $result['tmp2']['name'] = 'ログインメールアドレス'; $result['tmp2']['value'] = $Customer->getEmail(); $result['tmp3']['name'] = '初期パスワード'; $result['tmp3']['value'] = $password; $this->app['monolog.amazonpayments']->addInfo('*** 会員登録処理 end. ***'); return $result; } elseif ($this->amazonSettings['login_required'] == 1 && $customerRegFlg === true && (!(empty($Customer) || $del_flg == 1) || !(empty($AmazonCustomer) || $del_flg == 0))) { $this->app['monolog.amazonpayments']->addInfo('*** 会員登録エラー(登録済み) retry ***'); return false; } elseif ($this->amazonSettings['login_required'] == 0 && $customerRegFlg === true && (!(empty($Customer) || $del_flg == 1) || !(empty($AmazonCustomer) || $del_flg == 0))) { $this->app['monolog.amazonpayments']->addInfo('*** 会員登録エラー(登録済み) skip. ***'); $result = array(); $result['title']['name'] = ''; $result['title']['value'] = '会員登録'; $result['tmp']['name'] = 'マイページURL'; $result['tmp']['value'] = $this->app->url('mypage'); $result['tmp2']['name'] = ''; $result['tmp2']['value'] = '※会員登録済みです。メールアドレスは'. $Order->getEmail(). 'です。'; return $result; } elseif ($this->amazonSettings['login_required'] == 1 && $customerRegFlg === false) { $this->app['monolog.amazonpayments']->addInfo('*** 会員登録エラー(登録必須) retry. ***'); return false; } } public function loginCustomer(Order $Order, $data) { $loginFlg = false; $login_check_error = $this->app['validator']->validateValue($data['login_check'], array( new Assert\NotBlank(), )); $login_check_error = mb_substr($login_check_error, mb_strpos($login_check_error, ':') + 1); $amazon_login_email_error = $this->app['validator']->validateValue($data['amazon_login_email'], array( new Assert\NotBlank(), new Assert\Email(), )); $amazon_login_email_error = mb_substr($amazon_login_email_error, mb_strpos($amazon_login_email_error, ':') + 1); $amazon_login_password_error = $this->app['validator']->validateValue($data['amazon_login_password'], array( new Assert\NotBlank(), )); $amazon_login_password_error = mb_substr($amazon_login_password_error, mb_strpos($amazon_login_password_error, ':') + 1); if (!empty($login_check_error) || !empty($amazon_login_email_error) || !empty($amazon_login_password_error)) { return $loginFlg; } $Customer = $this->app['eccube.repository.customer']->findOneBy(array('email' => $data['amazon_login_email'])); if (empty($Customer)) { return $loginFlg; } else { $this->app['monolog.amazonpayments']->addInfo('*** 決済同時ログイン処理 start. ***'); $origPassword = $Customer->getPassword(); $dummyCustomer = new Customer(); $dummyCustomer->setPassword($data['amazon_login_password']); $dummyCustomer->setSalt($Customer->getSalt()); $encodePassword = $this->app['eccube.repository.customer']->encryptPassword($this->app, $dummyCustomer); if ($origPassword === $encodePassword) { $Order->setCustomer($Customer); $this->app['orm.em']->flush(); $this->app['monolog.amazonpayments']->addInfo('*** 決済同時ログイン処理成功 customer_id = ' . $Customer->getId() . ' ***'); $loginFlg = true; } $this->app['monolog.amazonpayments']->addInfo('*** 決済同時ログイン処理 end. ***'); return $loginFlg; } } public function reviseName($name) { $arrFixName = array(); $Objects = $this->searchObject($name, 'name', 'Order'); if (empty($Objects)) { $Objects = $this->searchObject($name, 'name', 'Shipping'); if (empty($Objects)) { $Objects = $this->searchObject($name, 'name', 'Customer'); } } if (!empty($Objects)) { $arrFixName['name01'] = $Objects[0]->getName01(); $arrFixName['name02'] = $Objects[0]->getName02(); } return $arrFixName; } public function reviseTel($tel) { $arrFixTel = array(); $Objects = $this->searchObject($tel, 'tel', 'Order'); if (empty($Objects)) { $Objects = $this->searchObject($tel, 'tel', 'Shipping'); if (empty($Objects)) { $Objects = $this->searchObject($tel, 'tel', 'Customer'); } } if (!empty($Objects)) { $arrFixTel['tel01'] = $Objects[0]->getTel01(); $arrFixTel['tel02'] = $Objects[0]->getTel02(); $arrFixTel['tel03'] = $Objects[0]->getTel03(); } return $arrFixTel; } public function reviseKana($name01, $name02, $email) { $arrFixKana = array(); $Objects = $this->searchObjectByNameAndEmail($name01, $name02, $email, 'kana', 'Order'); if (empty($Objects)) { $Objects = $this->searchObjectByNameAndEmail($name01, $name02, $email, 'kana', 'Shipping'); if (empty($Objects)) { $Objects = $this->searchObjectByNameAndEmail($name01, $name02, $email, 'kana', 'Customer'); } } if (!empty($Objects)) { $arrFixKana['kana01'] = $Objects[0]->getKana01(); $arrFixKana['kana02'] = $Objects[0]->getKana02(); } return $arrFixKana; } private function searchObject($search, $target, $objectName) { $qb = $this->app['orm.em']->createQueryBuilder(); $qb ->select('o') ->from('\Eccube\Entity'."\\$objectName", 'o'); if ($target == 'name') { $qb ->andWhere('CONCAT(o.name01, o.name02) = :name') ->setParameter('name', $search) ->andWhere("TRIM(o.name02) <> ''"); } elseif ($target == 'tel') { $qb ->andWhere('CONCAT(CONCAT(o.tel01, o.tel02), o.tel03) = :tel') ->setParameter('tel', $search) ->andWhere("TRIM(o.tel02) <> ''") ->andWhere("TRIM(o.tel03) <> ''"); } return $qb ->getQuery() ->getResult(); } private function searchObjectByNameAndEmail($name01, $name02, $email, $target, $objectName) { $qb = $this->app['orm.em']->createQueryBuilder(); if ($target == 'kana') { if ($objectName == 'Order') { $qb ->select('o') ->from('\Eccube\Entity\Order', 'o') ->innerJoin('\Plugin\AmazonPayments\Entity\AmazonOrder', 'ao', 'WITH', 'o = ao.Order') ->andWhere('o.name01 = :name01') ->setParameter('name01', $name01) ->andWhere('o.name02 = :name02') ->setParameter('name02', $name02) ->andWhere('o.email = :email') ->setParameter('email', $email) ->andWhere("o.kana01 <> ''") ->andWhere("o.kana02 <> ''") ->orderBy('o.update_date', 'DESC'); } elseif ($objectName == 'Shipping') { $qb ->select('s') ->from('\Eccube\Entity\Shipping', 's') ->leftJoin('s.Order', 'o') ->innerJoin('\Plugin\AmazonPayments\Entity\AmazonOrder', 'ao', 'WITH', 'o = ao.Order') ->andWhere('s.name01 = :name01') ->setParameter('name01', $name01) ->andWhere('s.name02 = :name02') ->setParameter('name02', $name02) ->andWhere('o.email = :email') ->setParameter('email', $email) ->andWhere("s.kana01 <> ''") ->andWhere("s.kana02 <> ''") ->orderBy('o.update_date', 'DESC'); } elseif ($objectName == 'Customer') { $qb ->select('c') ->from('\Eccube\Entity\Customer', 'c') ->innerJoin('\Plugin\AmazonPayments\Entity\AmazonCustomer', 'ac', 'WITH', 'c.id = ac.customer_id') ->andWhere('c.name01 = :name01') ->setParameter('name01', $name01) ->andWhere('c.name02 = :name02') ->setParameter('name02', $name02) ->andWhere('c.email = :email') ->setParameter('email', $email) ->andWhere("c.kana01 <> ''") ->andWhere("c.kana02 <> ''") ->orderBy('c.update_date', 'DESC'); } } return $qb ->getQuery() ->getResult(); } public function adminRequest($amazon_request, $AmazonOrder) { $process = $amazon_request == 'amazon_capture' ? '売上' : '取消'; $amazonErr = ''; $Order = $AmazonOrder->getOrder(); $order_id = $Order->getId(); $amazonReferenceId = $AmazonOrder->getReferenceCode(); $AmazonTradings = $AmazonOrder->getAmazonTradings(); $amazon_status = $AmazonOrder->getAmazonStatus()->getName(); $sumAuthoriAmount = 0; $sumCaptureAmount = 0; foreach ($AmazonTradings as $AmazonTrading) { $sumAuthoriAmount += $AmazonTrading->getAuthoriAmount(); $sumCaptureAmount += $AmazonTrading->getCaptureAmount(); } $payment_total = $AmazonOrder->getOrder()->getPaymentTotal(); $billableAmount = $AmazonOrder->getBillableAmount(); $totalBillingAmount = $payment_total - $sumCaptureAmount; if ($amazon_request == 'amazon_cancel' && $payment_total == $sumCaptureAmount) { $allRefund_flg = true; } else { $allRefund_flg = false; } $cancel_flg = false; $totalRefundAmount = $allRefund_flg ? $payment_total : $sumCaptureAmount - $payment_total; $resultAmazonTradingInfo = array(); foreach ($AmazonTradings as $key => $AmazonTrading) { $amazonTradingId = $AmazonTrading->getTradingCode(); $authoriAmount = $AmazonTrading->getAuthoriAmount(); $captureAmount = $AmazonTrading->getCaptureAmount(); $refundCount = $AmazonTrading->getRefundCount(); if ($amazon_request == 'amazon_capture') { if ($captureAmount > 0 || $totalBillingAmount == 0) { $AmazonTrading = $AmazonTrading; } else { $billingAmount = $authoriAmount > $totalBillingAmount ? $totalBillingAmount : $authoriAmount; $amazonAuthorizationId = $amazonTradingId; $r = $this->app['eccube.plugin.amazonpayments.service.amazon_request']->capture($amazonAuthorizationId, $order_id, $billingAmount); if ($r === false) { $this->app['monolog.amazonpayments']->addError("aws request error from admin_order r=".print_r($r, true)); break; } $AmazonTrading->setCaptureAmount($billingAmount); $this->app['orm.em']->persist($AmazonTrading); $totalBillingAmount = $totalBillingAmount - $billingAmount; $billableAmount = $billableAmount - $billingAmount; } if (($payment_total > $sumAuthoriAmount && $amazon_status == 'オーソリ') || ($totalBillingAmount > 0 && $amazon_status == '売上')) { if ($amazon_status == 'オーソリ') { $addAmount = $payment_total - $sumAuthoriAmount; } else { $addAmount = $totalBillingAmount; } $r = $this->app['eccube.plugin.amazonpayments.service.amazon_request']->authorize($amazonReferenceId, 'A'.count($AmazonTradings).'_'.$order_id, $addAmount); if ($r === false && $r === 'status_failed') { $this->app['monolog.amazonpayments']->addError("aws request error from admin_order r=".print_r($r, true)); break; } $newAmazonAuthorizeId = $this->app['eccube.plugin.amazonpayments.service.amazon_request']->sfGetXMLTagValue($r, 'AMAZONAUTHORIZATIONID'); $r = $this->app['eccube.plugin.amazonpayments.service.amazon_request']->capture($newAmazonAuthorizeId, 'A'.count($AmazonTradings).'_'.$order_id, $addAmount); if ($r === false) { $this->app['monolog.amazonpayments']->addError("aws request error from admin_order r=".print_r($r, true)); break; } $newAmazonTrading = new AmazonTrading(); $newAmazonTrading->setAmazonOrder($AmazonOrder); $newAmazonTrading->setTradingCode($newAmazonAuthorizeId); $newAmazonTrading->setAuthoriAmount($addAmount); $newAmazonTrading->setCaptureamount($addAmount); $newAmazonTrading->setRefundCount(0); $AmazonOrder->addAmazonTrading($newAmazonTrading); $this->app['orm.em']->persist($newAmazonTrading); $totalBillingAmount = $totalBillingAmount - $addAmount; $billableAmount = $billableAmount - $addAmount; } } else { if ($sumCaptureAmount == 0) { $r = $this->app['eccube.plugin.amazonpayments.service.amazon_request']->cancelOrderReference($amazonReferenceId); $cancel_flg = true; } else if ($totalRefundAmount == 0) { continue; } else { $prefix = $key != 0 ? 'A' . $key . '_' : ''; $refundAmount = $captureAmount > $totalRefundAmount ? $totalRefundAmount : $captureAmount; $amazonCaptureId = substr_replace($amazonTradingId, 'C', strrpos($amazonTradingId, 'A'), 1); $refundCount = $refundCount + 1; $r = $this->app['eccube.plugin.amazonpayments.service.amazon_request']->refund($amazonCaptureId, $prefix .$refundCount .'_' .$order_id, $refundAmount); if ($r === false) { $this->app['monolog.amazonpayments']->addError("aws request error from admin_order r=".print_r($r, true)); break; } $AmazonTrading->setCaptureAmount($captureAmount - $refundAmount); $AmazonTrading->setRefundCount($refundCount); $this->app['orm.em']->persist($AmazonTrading); $totalRefundAmount = $totalRefundAmount - $refundAmount; } } } if (is_array($r)) { if ($cancel_flg || $allRefund_flg) { $OrderStatus = $this->app['eccube.repository.order_status']->find($this->app['config']['order_cancel']); $Order->setOrderStatus($OrderStatus); $AmazonStatus = $this->app['eccube.plugin.amazonpayments.repository.amazon_status']->find(3); } else { $Order->setPaymentDate(new \DateTime()); $AmazonOrder->setBillableAmount($billableAmount); $AmazonStatus = $this->app['eccube.plugin.amazonpayments.repository.amazon_status']->find(2); } $AmazonOrder->setAmazonStatus($AmazonStatus); $this->app['orm.em']->persist($Order); $this->app['orm.em']->persist($AmazonOrder); $this->app['orm.em']->flush(); } else if ($r === false) { $amazonErr = "下記のエラーが発生しました。\n" ."リクエストを受け付けないため処理を終了しました。\n"; } else { $amazonErr = "下記のエラーが発生しました。\n $r \n"; } return $amazonErr; } public function createPassword($length = 8) { $pwd = array(); $pwd_strings = array("sletter" => range('a', 'z'), "cletter" => range('A', 'Z'), "number" => range('0', '9')); while (count($pwd) < $length) { $key = array_rand($pwd_strings); $pwd[] = $pwd_strings[$key][array_rand($pwd_strings[$key])]; } shuffle($pwd); return implode($pwd); } function correctFormatPhoneNumber($number) { $area_code = $this->getAreaCode(); $correctTel = null; foreach ($area_code as $len => $group) { $area = substr($number, 0, $len); if (isset($group[$area])) { $formatted = implode('-', array($area, substr($number, $len, $group[$area]), substr($number, $len + $group[$area]))); $correctTel = strrchr($formatted, '-') !== '-' ? $formatted : null; break; } } return $correctTel; } public function getAreaCode() { if (is_null(self::$area_code)) { self::$area_code = array( 5 => array( '01267' => 1, '01372' => 1, '01374' => 1, '01377' => 1, '01392' => 1, '01397' => 1, '01398' => 1, '01456' => 1, '01457' => 1, '01466' => 1, '01547' => 1, '01558' => 1, '01564' => 1, '01586' => 1, '01587' => 1, '01632' => 1, '01634' => 1, '01635' => 1, '01648' => 1, '01654' => 1, '01655' => 1, '01656' => 1, '01658' => 1, '04992' => 1, '04994' => 1, '04996' => 1, '04998' => 1, '05769' => 1, '05979' => 1, '07468' => 1, '08387' => 1, '08388' => 1, '08396' => 1, '08477' => 1, '08512' => 1, '08514' => 1, '09496' => 1, '09802' => 1, '09912' => 1, '09913' => 1, '09969' => 1, ), 4 => array( '0120' => 3, '0123' => 2, '0124' => 2, '0125' => 2, '0126' => 2, '0133' => 2, '0134' => 2, '0135' => 2, '0136' => 2, '0137' => 2, '0138' => 2, '0139' => 2, '0142' => 2, '0143' => 2, '0144' => 2, '0145' => 2, '0146' => 2, '0152' => 2, '0153' => 2, '0154' => 2, '0155' => 2, '0156' => 2, '0157' => 2, '0158' => 2, '0162' => 2, '0163' => 2, '0164' => 2, '0165' => 2, '0166' => 2, '0167' => 2, '0172' => 2, '0173' => 2, '0174' => 2, '0175' => 2, '0176' => 2, '0178' => 2, '0179' => 2, '0182' => 2, '0183' => 2, '0184' => 2, '0185' => 2, '0186' => 2, '0187' => 2, '0191' => 2, '0192' => 2, '0193' => 2, '0194' => 2, '0195' => 2, '0197' => 2, '0198' => 2, '0220' => 2, '0223' => 2, '0224' => 2, '0225' => 2, '0226' => 2, '0228' => 2, '0229' => 2, '0233' => 2, '0234' => 2, '0235' => 2, '0237' => 2, '0238' => 2, '0240' => 2, '0241' => 2, '0242' => 2, '0243' => 2, '0244' => 2, '0246' => 2, '0247' => 2, '0248' => 2, '0250' => 2, '0254' => 2, '0255' => 2, '0256' => 2, '0257' => 2, '0258' => 2, '0259' => 2, '0260' => 2, '0261' => 2, '0263' => 2, '0264' => 2, '0265' => 2, '0266' => 2, '0267' => 2, '0268' => 2, '0269' => 2, '0270' => 2, '0274' => 2, '0276' => 2, '0277' => 2, '0278' => 2, '0279' => 2, '0280' => 2, '0282' => 2, '0283' => 2, '0284' => 2, '0285' => 2, '0287' => 2, '0288' => 2, '0289' => 2, '0291' => 2, '0293' => 2, '0294' => 2, '0295' => 2, '0296' => 2, '0297' => 2, '0299' => 2, '0422' => 2, '0428' => 2, '0436' => 2, '0438' => 2, '0439' => 2, '0460' => 2, '0463' => 2, '0465' => 2, '0466' => 2, '0467' => 2, '0470' => 2, '0475' => 2, '0476' => 2, '0478' => 2, '0479' => 2, '0480' => 2, '0493' => 2, '0494' => 2, '0495' => 2, '0531' => 2, '0532' => 2, '0533' => 2, '0536' => 2, '0537' => 2, '0538' => 2, '0539' => 2, '0544' => 2, '0545' => 2, '0547' => 2, '0548' => 2, '0550' => 2, '0551' => 2, '0553' => 2, '0554' => 2, '0555' => 2, '0556' => 2, '0557' => 2, '0558' => 2, '0561' => 2, '0562' => 2, '0563' => 2, '0564' => 2, '0565' => 2, '0566' => 2, '0567' => 2, '0568' => 2, '0569' => 2, '0570' => 3, '0572' => 2, '0573' => 2, '0574' => 2, '0575' => 2, '0576' => 2, '0577' => 2, '0578' => 2, '0581' => 2, '0584' => 2, '0585' => 2, '0586' => 2, '0587' => 2, '0594' => 2, '0595' => 2, '0596' => 2, '0597' => 2, '0598' => 2, '0599' => 2, '0721' => 2, '0725' => 2, '0735' => 2, '0736' => 2, '0737' => 2, '0738' => 2, '0739' => 2, '0740' => 2, '0742' => 2, '0743' => 2, '0744' => 2, '0745' => 2, '0746' => 2, '0747' => 2, '0748' => 2, '0749' => 2, '0761' => 2, '0763' => 2, '0765' => 2, '0766' => 2, '0767' => 2, '0768' => 2, '0770' => 2, '0771' => 2, '0772' => 2, '0773' => 2, '0774' => 2, '0776' => 2, '0778' => 2, '0779' => 2, '0790' => 2, '0791' => 2, '0794' => 2, '0795' => 2, '0796' => 2, '0797' => 2, '0798' => 2, '0799' => 2, '0800' => 3, '0820' => 2, '0823' => 2, '0824' => 2, '0826' => 2, '0827' => 2, '0829' => 2, '0833' => 2, '0834' => 2, '0835' => 2, '0836' => 2, '0837' => 2, '0838' => 2, '0845' => 2, '0846' => 2, '0847' => 2, '0848' => 2, '0852' => 2, '0853' => 2, '0854' => 2, '0855' => 2, '0856' => 2, '0857' => 2, '0858' => 2, '0859' => 2, '0863' => 2, '0865' => 2, '0866' => 2, '0867' => 2, '0868' => 2, '0869' => 2, '0875' => 2, '0877' => 2, '0879' => 2, '0880' => 2, '0883' => 2, '0884' => 2, '0885' => 2, '0887' => 2, '0889' => 2, '0892' => 2, '0893' => 2, '0894' => 2, '0895' => 2, '0896' => 2, '0897' => 2, '0898' => 2, '0920' => 2, '0930' => 2, '0940' => 2, '0942' => 2, '0943' => 2, '0944' => 2, '0946' => 2, '0947' => 2, '0948' => 2, '0949' => 2, '0950' => 2, '0952' => 2, '0954' => 2, '0955' => 2, '0956' => 2, '0957' => 2, '0959' => 2, '0964' => 2, '0965' => 2, '0966' => 2, '0967' => 2, '0968' => 2, '0969' => 2, '0972' => 2, '0973' => 2, '0974' => 2, '0977' => 2, '0978' => 2, '0979' => 2, '0980' => 2, '0982' => 2, '0983' => 2, '0984' => 2, '0985' => 2, '0986' => 2, '0987' => 2, '0990' => 3, '0993' => 2, '0994' => 2, '0995' => 2, '0996' => 2, '0997' => 2, ), 3 => array( '011' => 3, '015' => 3, '017' => 3, '018' => 3, '019' => 3, '020' => 4, '022' => 3, '023' => 3, '024' => 3, '025' => 3, '026' => 3, '027' => 3, '028' => 3, '029' => 3, '042' => 3, '043' => 3, '044' => 3, '045' => 3, '046' => 3, '047' => 3, '048' => 3, '049' => 3, '050' => 4, '052' => 3, '053' => 3, '054' => 3, '055' => 3, '058' => 3, '059' => 3, '070' => 4, '072' => 3, '073' => 3, '075' => 3, '076' => 3, '077' => 3, '078' => 3, '079' => 3, '080' => 4, '082' => 3, '083' => 3, '084' => 3, '086' => 3, '087' => 3, '088' => 3, '089' => 3, '090' => 4, '092' => 3, '093' => 3, '095' => 3, '096' => 3, '097' => 3, '098' => 3, '099' => 3, ), 2 => array( '03' => 4, '04' => 4, '06' => 4, ), ); } return self::$area_code; } } 