<?php
 namespace DoctrineMigrations; use Doctrine\DBAL\Migrations\AbstractMigration; use Doctrine\DBAL\Schema\Schema; use Symfony\Component\Yaml\Yaml; class Version20160508003135 extends AbstractMigration { public function up(Schema $schema) { $this->createPlgAmazonPaymentsInfo($schema); $this->createPlgAmazonPaymentsStatus($schema); $this->createPlgAmazonPaymentsOrder($schema); $this->createPlgAmazonPaymentsTrading($schema); $this->createPlgAmazonPaymentsCustomer($schema); } public function down(Schema $schema) { $app = new \Eccube\Application(); $app->initialize(); $app->initializePlugin(); $app->boot(); $this->deleteFromDtbPayment(); $this->deleteFromDtbPageLayout(); $this->deleteFromDtbCsv(); $schema->dropTable('plg_amazonpayments_customer'); $schema->dropTable('plg_amazonpayments_info'); $schema->dropTable('plg_amazonpayments_status'); $schema->dropTable('plg_amazonpayments_order'); $schema->dropTable('plg_amazonpayments_trading'); } public function postUp(Schema $schema) { $app = new \Eccube\Application(); $app->initialize(); $app->initializePlugin(); $app->boot(); $datetime = date('Y-m-d H:i:s'); $config_file = __DIR__ . '/../../../config/eccube/database.yml'; $config = Yaml::parse(file_get_contents($config_file)); $select = "SELECT max(rank)+1 FROM dtb_payment"; $rank = $this->connection->fetchColumn($select); $payment_id = ''; if ($config['database']['driver'] == 'pdo_mysql') { $insert = "INSERT INTO dtb_payment(creator_id, payment_method, charge, rule_max, rank, create_date, update_date, rule_min)
                        VALUES (1, 'AmazonPay', 0, 999999999, $rank, '$datetime', '$datetime', 999999999);"; $this->connection->executeUpdate($insert); $select = "SELECT max(payment_id) FROM dtb_payment WHERE payment_method = 'AmazonPay'"; $payment_id = $this->connection->fetchColumn($select); } else { $nextval = "SELECT nextval('dtb_payment_payment_id_seq')"; $payment_id = $this->connection->fetchColumn($nextval); $insert = "INSERT INTO dtb_payment(payment_id, creator_id, payment_method, charge, rule_max, rank, create_date, update_date, rule_min)
                        VALUES ($payment_id, 1, 'AmazonPay', 0, 999999999, $rank, '$datetime', '$datetime', 999999999);"; $this->connection->executeUpdate($insert); } $select = "SELECT delivery_id FROM dtb_delivery WHERE del_flg = 0"; $deliveryIds = $this->connection->fetchAll($select); foreach ($deliveryIds as $item) { $delivery_id = $item['delivery_id']; $insert = "INSERT INTO dtb_payment_option(delivery_id, payment_id)
                        VALUES ($delivery_id, $payment_id);"; $this->connection->executeUpdate($insert); } $select = "SELECT max(rank) FROM dtb_csv WHERE csv_type = 3"; $rank = $this->connection->fetchColumn($select); $insert = "INSERT INTO dtb_csv(csv_id, csv_type, creator_id, entity_name, field_name, reference_field_name, disp_name, rank, enable_flg, create_date, update_date)
                    SELECT max(csv_id) + 1, 3, 1, 'Plugin\\\AmazonPayments\\\Entity\\\AmazonOrder', 'reference_code', null, 'Amazon参照ID', $rank, 1, '$datetime', '$datetime' FROM dtb_csv;"; $this->connection->executeUpdate($insert); $insert = "INSERT INTO dtb_csv(csv_id, csv_type, creator_id, entity_name, field_name, reference_field_name, disp_name, rank, enable_flg, create_date, update_date)
                    SELECT max(csv_id) + 1, 3, 1, 'Plugin\\\AmazonPayments\\\Entity\\\AmazonOrder', 'AmazonStatus', 'name', 'Amazon状況', $rank + 1, 1, '$datetime', '$datetime' FROM dtb_csv;"; $this->connection->executeUpdate($insert); $insert = "INSERT INTO dtb_page_layout(page_id, device_type_id, page_name, url, file_name, edit_flg, create_date, update_date, meta_robots)
                    SELECT max(page_id) + 1, 10, '商品購入(AmazonPay)', 'amazon_shopping', 'AmazonShopping/index', 2, '$datetime', '$datetime', 'noindex' FROM dtb_page_layout;"; $this->connection->executeUpdate($insert); $insert = "INSERT INTO dtb_page_layout(page_id, device_type_id, page_name, url, file_name, edit_flg, create_date, update_date, meta_robots)
                    SELECT max(page_id) + 1, 10, '商品購入(AmazonPay)/お届け先選択', 'amazon_shopping_address', 'AmazonShopping/address', 2, '$datetime', '$datetime', 'noindex' FROM dtb_page_layout;"; $this->connection->executeUpdate($insert); $insert = "INSERT INTO dtb_page_layout(page_id, device_type_id, page_name, url, file_name, edit_flg, create_date, update_date, meta_robots)
                    SELECT max(page_id) + 1, 10, '商品購入(AmazonPay)/配送方法選択', 'amazon_shopping_delivery', 'AmazonShopping/delivery', 2, '$datetime', '$datetime', 'noindex' FROM dtb_page_layout;"; $this->connection->executeUpdate($insert); $insert = "INSERT INTO dtb_page_layout(page_id, device_type_id, page_name, url, file_name, edit_flg, create_date, update_date, meta_robots)
                    SELECT max(page_id) + 1, 10, '商品購入(AmazonPay)/ご注文確認', 'amazon_shopping_confirm', 'AmazonShopping/confirm', 2, '$datetime', '$datetime', 'noindex' FROM dtb_page_layout;"; $this->connection->executeUpdate($insert); $insert = "INSERT INTO dtb_page_layout(page_id, device_type_id, page_name, url, file_name, edit_flg, create_date, update_date, meta_robots)
                    SELECT max(page_id) + 1, 10, '商品購入(AmazonPay)/ご注文完了', 'amazon_shopping_complete', 'AmazonShopping/complete', 2, '$datetime', '$datetime', 'noindex' FROM dtb_page_layout;"; $this->connection->executeUpdate($insert); $insert = "INSERT INTO plg_amazonpayments_info(id, code, name, payment_id, create_date, update_date)
                    VALUES (1, 'AmazonPayments', 'AmazonPayments', $payment_id, '$datetime', '$datetime');"; $this->connection->executeUpdate($insert); $insert = "INSERT INTO plg_amazonpayments_status VALUES (1, 'オーソリ', 1);"; $this->connection->executeUpdate($insert); $insert = "INSERT INTO plg_amazonpayments_status VALUES (2, '売上', 2);"; $this->connection->executeUpdate($insert); $insert = "INSERT INTO plg_amazonpayments_status VALUES (3, '取消', 3);"; $this->connection->executeUpdate($insert); } public function createPlgAmazonPaymentsInfo(Schema $schema) { $table = $schema->createTable('plg_amazonpayments_info'); $table->addColumn('id', 'integer', array( 'autoincrement' => true, )); $table->addColumn('code', 'text', array( 'notnull' => true, )); $table->addColumn('name', 'text', array( 'notnull' => true, )); $table->addColumn('setting_data', 'text', array( 'notnull' => false, )); $table->addColumn('payment_id', 'integer', array( 'notnull' => true, )); $table->addColumn('del_flg', 'smallint', array( 'notnull' => true, 'unsigned' => false, 'default' => 0, )); $table->addColumn('create_date', 'datetime', array( 'notnull' => true, 'unsigned' => false, )); $table->addColumn('update_date', 'datetime', array( 'notnull' => true, 'unsigned' => false, )); $table->setPrimaryKey(array('id')); $table->addForeignKeyConstraint('dtb_payment', array('payment_id'), array('payment_id')); } public function createPlgAmazonPaymentsStatus(Schema $schema) { $table = $schema->createTable('plg_amazonpayments_status'); $table->addColumn('id', 'smallint'); $table->addColumn('name', 'text', array( 'notnull' => true, )); $table->addColumn('rank', 'smallint', array( 'notnull' => false, )); $table->setPrimaryKey(array('id')); } public function createPlgAmazonPaymentsOrder(Schema $schema) { $table = $schema->createTable('plg_amazonpayments_order'); $table->addColumn('amazon_order_id', 'integer', array( 'autoincrement' => true, )); $table->addColumn('order_id', 'integer', array( 'notnull' => false, )); $table->addColumn('reference_code', 'text', array( 'notnull' => false, )); $table->addColumn('amazon_status', 'smallint', array( 'notnull' => false, )); $table->addColumn('billable_amount', 'integer', array( 'notnull' => false, )); $table->setPrimaryKey(array('amazon_order_id')); $table->addForeignKeyConstraint('dtb_order', array('order_id'), array('order_id')); } public function createPlgAmazonPaymentsTrading(Schema $schema) { $table = $schema->createTable('plg_amazonpayments_trading'); $table->addColumn('amazon_trading_id', 'integer', array( 'autoincrement' => true, )); $table->addColumn('amazon_order_id', 'integer', array( 'notnull' => false, )); $table->addColumn('trading_code', 'text', array( 'notnull' => false, )); $table->addColumn('authori_amount', 'integer', array( 'notnull' => false, )); $table->addColumn('capture_amount', 'integer', array( 'notnull' => false, )); $table->addColumn('refund_count', 'smallint', array( 'notnull' => false, 'default' => 0, )); $table->setPrimaryKey(array('amazon_trading_id')); $table->addForeignKeyConstraint('plg_amazonpayments_order', array('amazon_order_id'), array('amazon_order_id')); } public function createPlgAmazonPaymentsCustomer(Schema $schema) { $table = $schema->createTable('plg_amazonpayments_customer'); $table->addColumn('customer_id', 'integer', array( 'notnull' => false, )); $table->addColumn('amazon_user_id', 'text', array( 'notnull' => false, )); $table->setPrimaryKey(array('customer_id')); $table->addForeignKeyConstraint('dtb_customer', array('customer_id'), array('customer_id')); } public function deleteFromDtbPayment() { $select = "SELECT payment_id FROM plg_amazonpayments_info"; $payment_id = $this->connection->fetchColumn($select); $update = "UPDATE dtb_payment SET del_flg = 1 WHERE payment_id = $payment_id"; $this->connection->executeUpdate($update); $table = "dtb_payment_option"; $where = array("payment_id" => $payment_id); $this->connection->delete($table, $where); } public function deleteFromDtbPageLayout() { $table = "dtb_page_layout"; $where = array("url" => "amazon_shopping", "file_name" => "AmazonShopping/index"); $this->connection->delete($table, $where); $where = array("url" => "amazon_shopping_address", "file_name" => "AmazonShopping/address"); $this->connection->delete($table, $where); $where = array("url" => "amazon_shopping_delivery", "file_name" => "AmazonShopping/delivery"); $this->connection->delete($table, $where); $where = array("url" => "amazon_shopping_confirm", "file_name" => "AmazonShopping/confirm"); $this->connection->delete($table, $where); $where = array("url" => "amazon_shopping_complete", "file_name" => "AmazonShopping/complete"); $this->connection->delete($table, $where); } public function deleteFromDtbCsv() { $table = "dtb_csv"; $where = array("entity_name" => "Plugin\\AmazonPayments\\Entity\\AmazonOrder", "field_name" => "reference_code", "disp_name" => "Amazon参照ID"); $this->connection->delete($table, $where); $where = array("entity_name" => "Plugin\\AmazonPayments\\Entity\\AmazonOrder", "field_name" => "AmazonStatus", "disp_name" => "Amazon状況"); $this->connection->delete($table, $where); } function getAmazonPaymentsCode() { $config = \Eccube\Application::alias('config'); return ""; } } 