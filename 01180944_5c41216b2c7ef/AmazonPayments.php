<?php
 namespace Plugin\AmazonPayments; use Eccube\Common\Constant; use Eccube\Entity\Customer; use Symfony\Component\Form\FormError; use Symfony\Component\HttpKernel\Event\FilterResponseEvent; use Symfony\Component\Validator\Constraints as Assert; class AmazonPayments { private $app; private $sessionKey = 'eccube.front.shopping.nonmember'; private $sessionAmazonProfileKey = 'amazonpayments.profile'; private $sessionAmazonRequestKey = 'amazonpayments.shopping_request'; private $sessionAmazonAccessTokenKey = 'amazonpayments.access_token'; private $sessionAmazonRequestResultKey = 'amazonpayments.request_result'; public function __construct($app) { $this->app = $app; } public function onControllerShoppingBefore($event = null) { $Customer = $this->app['eccube.service.shopping']->getNonMember($this->sessionKey); if (!empty($Customer)) { $kana01 = $Customer->getKana01(); $kana02 = $Customer->getKana02(); if (empty($kana01) && empty($kana02)) { $this->app['session']->remove($this->sessionKey); } } $Order = $this->app['eccube.plugin.amazonpayments.service.amazon_shopping']->getOrder($this->app['config']['order_processing']); if (empty($Order)) { return; } $Payment = $Order->getPayment(); $AmazonPayment = $this->app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonPayment(); $referer = $this->app['request']->headers->get('referer'); if (preg_match('/(shopping_coupon|shopping\/use_point)/', $referer) && $Payment == $AmazonPayment) { if (version_compare('3.0.11', Constant::VERSION, '<=')) { $response = $this->app->redirect($this->app->url('amazon_shopping')); $event->setResponse($response); return; } else { header("Location:".$this->app->url('amazon_shopping')); exit; } } } public function onControllerShoppingDeliveryBefore($event = null) { $referer = $this->app['request']->headers->get('referer'); if (strpos($referer, 'amazon_shopping')) { if (version_compare('3.0.11', Constant::VERSION, '<=')) { $this->app['session']->set($this->sessionAmazonRequestKey, $this->app['request']); $response = $this->app->redirect($this->app->url('amazon_shopping_delivery')); $event->setResponse($response); return; } else { header('HTTP/1.1 307 Temporary Redirect'); header("Location:".$this->app->url('amazon_shopping_delivery')); exit; } } } public function onControllerShoppingConfirmBefore($event = null) { $referer = $this->app['request']->headers->get('referer'); if (strpos($referer, 'amazon_shopping')) { if (version_compare('3.0.11', Constant::VERSION, '<=')) { $this->app['session']->set($this->sessionAmazonRequestKey, $this->app['request']); $response = $this->app->redirect($this->app->url('amazon_shopping_confirm')); $event->setResponse($response); return; } else { header('HTTP/1.1 307 Temporary Redirect'); header("Location:".$this->app->url('amazon_shopping_confirm')); exit; } } } public function onControllerShoppingCustomerBefore($event = null) { $referer = $this->app['request']->headers->get('referer'); if (strpos($referer, 'amazon_shopping')) { $this->app['monolog.amazonpayments']->addInfo('AmazonShopping customer edit.'); } } public function onControllerAdminOrderIndexBefore($event = null) { $amazon_request = $this->app['request']->get('amazon_request'); if ($amazon_request == 'amazon_capture' || $amazon_request == 'amazon_cancel') { $requestOrderId = $this->app['request']->get('amazon_order_id'); if (!empty($requestOrderId)) { $arrOrderId = array($requestOrderId); } else { $arrOrderId = $this->app['request']->get($amazon_request . '_id'); } $Orders = array(); foreach ($arrOrderId as $order_id) { $Orders[] = $this->app['eccube.repository.order']->find($order_id); } $AmazonOrders = $this->app['eccube.plugin.amazonpayments.repository.amazon_order']->getAmazonOrderByOrderDataForAdmin($Orders); if (empty($AmazonOrders)) { $this->app['monolog.amazonpayments']->addError("request_parameter empty. POST=".print_r($_POST,true)); } $request_name = $amazon_request == 'amazon_capture' ? '売上' : '取消'; foreach ($AmazonOrders as $AmazonOrder) { $order_id = $AmazonOrder->getOrder()->getId(); $amazonErr = $this->app['eccube.plugin.amazonpayments.service.amazon_shopping']->adminRequest($amazon_request, $AmazonOrder); if (empty($amazonErr)) { $result_message = "■注文番号:" . $order_id . " ： " . $request_name . "処理に成功しました。"; $this->app->addSuccess($result_message, 'admin'); } else { $result_message = "■注文番号:" . $order_id . " ： " . $request_name . "処理に失敗しました。" . $amazonErr; $this->app->addError($result_message, 'admin'); } } if (version_compare('3.0.11', Constant::VERSION, '<=')) { $page_no = intval($this->app['session']->get('eccube.admin.order.search.page_no')); $page_no = $page_no ? $page_no : Constant::ENABLED; $response = $this->app->redirect($this->app->url('admin_order_page', array('page_no' => $page_no)).'?resume='.Constant::ENABLED); $event->setResponse($response); return; } else { header("Location:".$this->app->url('admin_order')); exit; } } } public function onRenderProductDetailBefore(FilterResponseEvent $event) { $amazonSettings = $this->app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonSettings(); if (array_search('products_detail', $amazonSettings['button_select']) === false) { return; } $product_id = $this->app['request']->get('id'); $Product = $this->app['eccube.repository.product']->get($product_id); $dom = $this->getDom($event); $template = $this->app['twig']->render('AmazonPayments/Twig/Product/amazonpayments_js.twig', array("amazonSettings" => $amazonSettings, "Product" => $Product)); $this->appendElement($event, $dom, $template, 'id', 'wrapper'); if ($amazonSettings['products_button_place'] == 'auto' && $Product->getStockFind()) { $template = $this->app['twig']->render('AmazonPayments/Twig/Product/button.twig', array("Product" => $Product)); $this->appendElement($event, $dom, $template, 'class', 'cart_area'); } } public function onRenderCartBefore(FilterResponseEvent $event) { $amazonSettings = $this->app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonSettings(); if (array_search('cart', $amazonSettings['button_select']) === false) { return; } $dom = $this->getDom($event); $template = $this->app['twig']->render('AmazonPayments/Twig/Cart/amazonpayments_js.twig', array("amazonSettings" => $amazonSettings)); $this->appendElement($event, $dom, $template, 'id', 'wrapper'); if ($amazonSettings['cart_button_place'] == 'auto') { $template = $this->app['twig']->render('AmazonPayments/Twig/Cart/button.twig'); $this->appendElement($event, $dom, $template, 'class', 'btn_group'); } } public function AmazonShoppingRender(FilterResponseEvent $event) { $amazonSettings = $this->app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonSettings(); $CouponPlugin = $this->app['eccube.repository.plugin']->findOneBy(array('code' => 'Coupon', 'enable' => 1)); $access_token = $this->app['request']->get('access_token'); $amazonSettings['addressConsentToken'] = empty($access_token) ? $this->app['request']->get('addressConsentToken') : $access_token; if (empty($amazonSettings['addressConsentToken'])) { $amazonSettings['addressConsentToken'] = $this->app['session']->get($this->sessionAmazonAccessTokenKey); } $first_load_flg = empty($access_token) ? false : true; $dom = $this->getDom($event); $template = $this->app['twig']->render('AmazonPayments/Twig/Shopping/widgets.twig', array("amazonSettings" => $amazonSettings, "first_load_flg" => $first_load_flg)); $this->replaceElement($event, $dom, $template, 'class', 'heading02', 1); $ProductTypeIds = array(); foreach ($this->app['eccube.service.cart']->getCart()->getCartItems() as $CartItem) { $ProductType = $CartItem->getObject()->getProductType(); if (in_array($ProductType->getId(), $ProductTypeIds)) { continue; } else { $ProductTypeIds[] = $ProductType->getId(); } if (!$this->app->isGranted('ROLE_USER')) { $index = 1; } else { $index = 0; } $this->removeElement($event, $dom, 'class', 'btn_edit', $index); } $BaseInfo = $this->app['eccube.repository.base_info']->get(); if ($BaseInfo->getOptionMultipleShipping() == Constant::ENABLED) { $this->removeElement($event, $dom, 'id', 'shopping_confirm_box__button_edit_multiple'); } if (!empty($CouponPlugin)) { $coupon_version = $CouponPlugin->getVersion(); if (version_compare('2.0.0', $coupon_version, '>')) { $Order = $this->app['eccube.plugin.amazonpayments.service.amazon_shopping']->getOrder($this->app['config']['order_processing']); if (is_null($Order)) { return; } $CouponOrder = $this->app['eccube.plugin.coupon.service.coupon']->getCouponOrder($Order->getPreOrderId()); $template = $this->app->renderView('Coupon/View/coupon_shopping_item.twig', array( 'CouponOrder' => $CouponOrder, )); $this->replaceElement($event, $dom, $template, 'class', 'heading02', 2); } else { $this->removeElement($event, $dom, 'class', 'heading02', 2); } } else { $this->removeElement($event, $dom, 'class', 'heading02', 2); } $this->removeElement($event, $dom, 'class', 'payment_list'); if (!$this->app->isGranted('IS_AUTHENTICATED_FULLY')) { $targetElements = $this->getElements($dom, 'id', 'confirm_side'); if (!empty($targetElements)) { $login_check = 0; $Order = $this->app['eccube.plugin.amazonpayments.service.amazon_shopping']->getOrder($this->app['config']['order_processing']); $builder = $this->app['eccube.plugin.amazonpayments.service.amazon_shopping']->getShippingFormBuilder($Order); $form = $builder->getForm(); if (version_compare('3.0.11', Constant::VERSION, '<=')) { $request = $this->app['session']->get($this->sessionAmazonRequestKey); if (!empty($request)) { $this->app['request'] = $request; $this->app['session']->remove($this->sessionAmazonRequestKey); } } $request_uri = $this->app['request']->getUri(); if ('POST' === $this->app['request']->getMethod() && strpos($request_uri, 'amazon_shopping/address') === false && strpos($request_uri, 'amazon_shopping/delivery') === false) { $form->handleRequest($this->app['request']); $data = $form->getData(); $login_check = $data['login_check']; if ($login_check == 0) { if (empty($data['customer_regist'])) { $form['customer_regist']->addError(new FormError('※ 会員登録が選択されていません。')); } else { $Customer = $this->app['eccube.repository.customer']->findOneBy(array('email' => $Order->getEmail())); $profile = unserialize($this->app['session']->get($this->sessionAmazonProfileKey)); $AmazonCustomer = $this->app['eccube.plugin.amazonpayments.repository.amazon_customer']->findOneBy(array('amazon_user_id' => $profile->user_id)); if (!empty($Customer)) { $form['customer_regist']->addError(new FormError('※ 会員登録済みです。メールアドレスは'. $Order->getEmail(). 'です。')); } else if(!empty($AmazonCustomer)) { $form['customer_regist']->addError(new FormError('※ このAmazonアカウントで既に会員登録済みです。メールアドレスは'. $AmazonCustomer->getCustomer()->getEmail(). 'です。')); } } } else { $login_check_error = $this->app['validator']->validateValue($data['login_check'], array( new Assert\NotBlank(), )); $login_check_error = mb_substr($login_check_error, mb_strpos($login_check_error, ':') + 1); if (!empty($login_check_error)) { $form['login_check']->addError(new FormError($login_check_error)); } $amazon_login_email_error = $this->app['validator']->validateValue($data['amazon_login_email'], array( new Assert\NotBlank(), new Assert\Email(), )); $amazon_login_email_error = mb_substr($amazon_login_email_error, mb_strpos($amazon_login_email_error, ':') + 1); if (!empty($amazon_login_email_error)) { $form['amazon_login_email']->addError(new FormError('※ メールアドレスが' . $amazon_login_email_error)); } $amazon_login_password_error = $this->app['validator']->validateValue($data['amazon_login_password'], array( new Assert\NotBlank(), )); $amazon_login_password_error = mb_substr($amazon_login_password_error, mb_strpos($amazon_login_password_error, ':') + 1); if (!empty($amazon_login_password_error)) { $form['amazon_login_password']->addError(new FormError('※ パスワードが' . $amazon_login_password_error)); } if (empty($login_check_error) && empty($amazon_login_email_error) && empty($amazon_login_password_error)) { $Customer = $this->app['eccube.repository.customer']->findOneBy(array('email' => $data['amazon_login_email'])); if (empty($Customer)) { $form['amazon_login_email']->addError(new FormError('※ メールアドレスまたはパスワードが正しくありません。')); } else { $origPassword = $Customer->getPassword(); $dummyCustomer = new Customer(); $dummyCustomer->setPassword($data['amazon_login_password']); $dummyCustomer->setSalt($Customer->getSalt()); $encodePassword = $this->app['eccube.repository.customer']->encryptPassword($this->app, $dummyCustomer); if ($origPassword !== $encodePassword) { $form['amazon_login_email']->addError(new FormError('※ メールアドレスまたはパスワードが正しくありません。')); } } } } } $MailMagazinePlugin = $this->app['eccube.repository.plugin']->findBy(array('code' => 'MailMagazine', 'enable' => 1)); $PostCarrierPlugin = $this->app['eccube.repository.plugin']->findBy(array('code' => 'PostCarrier', 'enable' => 1)); if (!empty($MailMagazinePlugin) || !empty($PostCarrierPlugin)) { $mailmaga_flg = true; } else { $mailmaga_flg = false; } $template = $this->app['twig']->render('AmazonPayments/Twig/Shopping/customer_regist.twig', array("form" => $form->createView(), "amazonSettings" => $amazonSettings, "mailmaga_flg" => $mailmaga_flg, "login_check" => $login_check)); $this->appendElement($event, $dom, $template, 'id', 'confirm_side'); } } } public function AdminAmazonOrderRender(FilterResponseEvent $event) { $amazonSettings = $this->app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonSettings(); $dom = $this->getDom($event); $trElements = $dom->getElementsByTagName("tr"); if (0 < $trElements->length) { $index = $trElements->item(0)->childNodes->length - 2; $template = $this->app['twig']->render('AmazonPayments/Twig/admin/Order/index_add_js.twig'); $this->appendElement($event, $dom, $template, 'id', 'dropdown-form'); $template = $this->app['twig']->render('AmazonPayments/Twig/admin/Order/index_add_1.twig', array("amazonSettings" => $amazonSettings)); $this->insertBeforeElementForTable($event, $dom, $template, $trElements->item(0), $index); $page_count = $this->app['config']['default_page_count']; $page_no = $this->app['request']->get('page_no'); if (version_compare('3.0.15', Constant::VERSION, '<=')) { $searchForm = $this->app['form.factory'] ->createBuilder('admin_search_order') ->getForm(); } if (!is_null($page_no)) { if (version_compare('3.0.15', Constant::VERSION, '<=')) { $searchForm->handleRequest($this->app['request']); $viewData = $this->app['session']->get('eccube.admin.order.search'); if (!is_null($viewData)) { $searchData = \Eccube\Util\FormUtil::submitAndGetData($searchForm, $viewData); } } else { $searchData = $this->app['session']->get('eccube.admin.order.search'); } if (!is_null($searchData)) { $status = $this->app['request']->get('status'); if (!empty($status)) { if ($status != $this->app['config']['admin_product_stock_status']) { $searchData['status']->clear(); $searchData['status']->add($status); } else { $searchData['stock_status'] = $this->app['config']['disabled']; } } $pcount = $this->app['request']->get('page_count'); $page_count = empty($pcount) ? $page_count : $pcount; } } else { $page_no = 1; if (version_compare('3.0.15', Constant::VERSION, '>')) { $searchForm = $this->app['form.factory'] ->createBuilder('admin_search_order') ->getForm(); } $searchForm->handleRequest($this->app['request']); $searchData = $searchForm->getData(); if (version_compare('3.0.15', Constant::VERSION, '<=')) { $page_count = $trElements->length - 1; } } $qb = $this->app['eccube.repository.order']->getQueryBuilderBySearchDataForAdmin($searchData); $Orders = $this->app['paginator']()->paginate( $qb, $page_no, $page_count ); $AmazonOrders = $this->app['eccube.plugin.amazonpayments.repository.amazon_order']->getAmazonOrderByOrderDataForAdmin($Orders); $amazon_count = 0; for ($i = 1; $i < $trElements->length; $i++) { $AmazonDisp = array(); if ($amazon_count < count($AmazonOrders) && $Orders[$i-1]->getId() == $AmazonOrders[$amazon_count]->getOrder()->getId()) { $Order = $Orders[$i-1]; $AmazonOrder = $AmazonOrders[$amazon_count]; $amazon_status = $AmazonOrder->getAmazonStatus()->getName(); $AmazonTradings = $AmazonOrder->getAmazonTradings(); $billableAmount = $AmazonOrder->getBillableAmount();; $payment_total = $Order->getPaymentTotal(); $sumAuthoriAmount = 0; $sumCaptureAmount = 0; foreach ($AmazonTradings as $AmazonTrading) { $sumAuthoriAmount += $AmazonTrading->getAuthoriAmount(); $sumCaptureAmount += $AmazonTrading->getCaptureAmount(); } if ($payment_total <= $sumCaptureAmount || $amazon_status == '取消') { $captureDisp = 0; } else if ($payment_total - $sumCaptureAmount > $billableAmount) { $captureDisp = 1; } else { if ($payment_total < $sumAuthoriAmount && $amazon_status == 'オーソリ') { $diffAmount = $sumAuthoriAmount - $payment_total; $captureDisp = 2; } else if ($payment_total > $sumAuthoriAmount && $amazon_status == 'オーソリ') { $diffAmount = $payment_total - $sumAuthoriAmount; $captureDisp = 3; } else if ($payment_total > $sumCaptureAmount && $amazon_status == '売上') { $diffAmount = $payment_total - $sumCaptureAmount; $captureDisp = 3; } else { $captureDisp = 4; } } if ($amazon_status == '取消') { $cancelDisp = 0; } else if ($amazon_status == '売上'){ if ($payment_total > $sumCaptureAmount) { $cancelDisp = 1; } else if ($payment_total < $sumCaptureAmount) { $diffAmount = $sumCaptureAmount - $payment_total; $cancelDisp = 2; } else { $cancelDisp = 3; } } else { $cancelDisp = 3; } $AmazonDisp['reference_code'] = $AmazonOrder->getReferenceCode(); $AmazonDisp['amazon_status'] = $amazon_status; $AmazonDisp['capture'] = $captureDisp; $AmazonDisp['cancel'] = $cancelDisp; $AmazonDisp['order_id'] = $Order->getId(); $AmazonDisp['diff_amount'] = isset($diffAmount) ? $diffAmount : 0; $amazon_count++; } else { $AmazonDisp['reference_code'] = null; $AmazonDisp['capture'] = 0; $AmazonDisp['cancel'] = 0; } $template = $this->app['twig']->render('AmazonPayments/Twig/admin/Order/index_add_2.twig', array("AmazonDisp" => $AmazonDisp)); $this->insertBeforeElementForTable($event, $dom, $template, $trElements->item($i), $index); } } } private function getDom(FilterResponseEvent $event) { $source = $event->getResponse()->getContent(); libxml_use_internal_errors(true); $dom = new \DOMDocument(); $dom->loadHTML('<?xml encoding="UTF-8">' . mb_convert_encoding($source,'HTML-ENTITIES', 'UTF-8')); $dom->encoding = "UTF-8"; $dom->formatOutput = true; return $dom; } private function getElements($dom, $item, $name) { $elements = array(); if ($item == 'tag') { $elements = $dom->getElementsByTagName($name); } else { $domElements = $dom->getElementsByTagName("*"); for ($i = 0; $i < $domElements->length; $i++) { if (@$domElements->item($i)->attributes->getNamedItem($item)->nodeValue == $name) { $elements[] = $domElements->item($i); } } } return $elements; } private function appendElement($event, $dom, $template, $item, $name, $index = 0) { $targetElements = $this->getElements($dom, $item, $name); if (!empty($targetElements)) { $addElement = $dom->createDocumentFragment(); $addElement->appendXML($template); $targetElements[$index]->appendChild($addElement); $source = $event->getResponse()->setContent(mb_convert_encoding($dom->saveHTML(), 'UTF-8', 'HTML-ENTITIES')); } } private function insertBeforeElement($event, $dom, $template, $item, $name, $index = 0) { $targetElements = $this->getElements($dom, $item, $name); if (!empty($targetElements)) { $addElement = $dom->createDocumentFragment(); $addElement->appendXML($template); $targetElements[$index]->parentNode->insertBefore($addElement, $targetElements[$index]); $source = $event->getResponse()->setContent(mb_convert_encoding($dom->saveHTML(), 'UTF-8', 'HTML-ENTITIES')); } } private function insertBeforeElementForTable($event, $dom, $template, $trElement, $index) { $targetElement = $trElement->childNodes->item($index); $addElement = $dom->createDocumentFragment(); $addElement->appendXML($template); $targetElement->parentNode->insertBefore($addElement, $targetElement); $source = $event->getResponse()->setContent(mb_convert_encoding($dom->saveHTML(), 'UTF-8', 'HTML-ENTITIES')); } private function replaceElement($event, $dom, $template, $item, $name, $index = 0) { $targetElements = $this->getElements($dom, $item, $name); if (!empty($targetElements)) { $addElement = $dom->createDocumentFragment(); $addElement->appendXML($template); $targetElements[$index]->parentNode->replaceChild($addElement, $targetElements[$index]); $source = $event->getResponse()->setContent(mb_convert_encoding($dom->saveHTML(), 'UTF-8', 'HTML-ENTITIES')); } } private function removeElement($event, $dom, $item, $name, $index = 0) { $targetElements = $this->getElements($dom, $item, $name); if (!empty($targetElements)) { $targetElements[$index]->parentNode->removeChild($targetElements[$index]); $source = $event->getResponse()->setContent(mb_convert_encoding($dom->saveHTML(), 'UTF-8', 'HTML-ENTITIES')); } } } ?>
