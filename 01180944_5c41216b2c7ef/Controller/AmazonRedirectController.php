<?php
 namespace Plugin\AmazonPayments\Controller; use Plugin\AmazonPayments\Entity\AmazonCustomer; use Eccube\Application; use Eccube\Controller\AbstractController; use Eccube\Entity\Customer; use Eccube\Exception\CartException; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken; class AmazonRedirectController extends AbstractController { private $sessionAmazonProfileKey = 'amazonpayments.profile'; private $sessionAmazonAccessTokenKey = 'amazonpayments.access_token'; public function index(Application $app, Request $request) { $app['monolog.amazonpayments']->addInfo('AmazonRedirect::index start.'); $amazonSettings = $app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonSettings(); $cartService = $app['eccube.service.cart']; $product_id = $request->get('product_id'); $quantity = $request->get('quantity'); if (!empty($product_id) && !empty($quantity)) { $class_category_id1 = $request->get('classcategory_id1'); $class_category_id2 = $request->get('classcategory_id2'); $Product = $app['eccube.repository.product']->findOneBy(array('id' => $product_id)); $find = array('Product' => $Product); if (!empty($class_category_id1)) { $ClassCategory1 = $app['eccube.repository.class_category']->findOneBy(array('id' => $class_category_id1)); $find['ClassCategory1'] = $ClassCategory1; } if (!empty($class_category_id2)) { $ClassCategory2 = $app['eccube.repository.class_category']->findOneBy(array('id' => $class_category_id2)); $find['ClassCategory2'] = $ClassCategory2; } $ProductClass = $app['eccube.repository.product_class']->findOneBy($find); try { $app['eccube.service.cart']->addProduct($ProductClass['id'], $quantity)->save(); } catch (CartException $e) { $app->addRequestError($e->getMessage()); return $app->redirect($app->url('cart')); } } $access_token = $request->get('access_token'); $profile = $app['eccube.plugin.amazonpayments.service.amazon_request']->getAmazonProfile($access_token); if ($profile === false) { return $app->redirect($app->url('cart')); } $auto_login_flg = false; if (!$app->isGranted('ROLE_USER') && $amazonSettings['auto_login'] == 1) { $app['monolog.amazonpayments']->addInfo('*** 自動ログイン処理 start ***'); $AmazonCustomer = $app['eccube.plugin.amazonpayments.repository.amazon_customer']->findOneBy(array('amazon_user_id' => $profile->user_id)); if (!empty($AmazonCustomer)) { $softDeleteFilter = $app['orm.em']->getFilters()->getFilter('soft_delete'); $softDeleteFilter->setExcludes(array( 'Eccube\Entity\Customer' )); $tempCustomer = $AmazonCustomer->getCustomer(); $del_flg = $tempCustomer->getDelFlg(); if ($del_flg == 0) { $Customer = new Customer(); $Customer->copyProperties($tempCustomer); $token = new UsernamePasswordToken($Customer, null, 'customer', array('ROLE_USER')); $this->getSecurity($app)->setToken($token); $app['monolog.amazonpayments']->addInfo('*** ログイン完了 customer_id = ' . $Customer->getId() . ' ***'); $auto_login_flg = true; } } $app['monolog.amazonpayments']->addInfo('*** 自動ログイン処理 end ***'); } if ($app->isGranted('IS_AUTHENTICATED_FULLY') && $amazonSettings['order_revise'] == 1) { $Customer = $app->user(); $revise_flg = false; $name02 = $Customer->getName02(); if (empty($name02) || $name02 == '　') { $arrFixName = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->reviseName($Customer->getName01()); if (!empty($arrFixName)) { $Customer->setName01($arrFixName['name01']) ->setName02($arrFixName['name02']); $revise_flg = true; $app['monolog.amazonpayments']->addInfo('*** 会員情報 名前補正 *** customer_id = ' . $Customer->getId()); } } $tel02 = $Customer->getTel02(); $tel03 = $Customer->getTel03(); if (empty($tel02) && empty($tel03)) { $arrFixTel = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->reviseTel($Customer->getTel01()); if (!empty($arrFixTel)) { $Customer->setTel01($arrFixTel['tel01']) ->setTel02($arrFixTel['tel02']) ->setTel03($arrFixTel['tel03']); $revise_flg = true; $app['monolog.amazonpayments']->addInfo('*** 会員情報 電話番号補正 *** customer_id = ' . $Customer->getId()); } } $kana01 = $Customer->getKana01(); $kana02 = $Customer->getKana02(); if (empty($kana01) && empty($kana02)) { $arrFixKana = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->reviseKana($Customer->getName01(), $Customer->getName02(), $Customer->getEmail()); if (!empty($arrFixKana)) { $Customer->setKana01($arrFixKana['kana01']) ->setKana02($arrFixKana['kana02']); $revise_flg = true; $app['monolog.amazonpayments']->addInfo('*** 会員情報 フリガナ補正 *** customer_id = ' . $Customer->getId()); } } if ($revise_flg !== false) { if ($auto_login_flg == true) { $tempCustomer->copyProperties($Customer); $app['orm.em']->persist($tempCustomer); } else { $app['orm.em']->persist($Customer); } $app['orm.em']->flush(); } } $cartService->lock(); $cartService->save(); $app['session']->set($this->sessionAmazonProfileKey, serialize($profile)); $app['session']->set($this->sessionAmazonAccessTokenKey, $access_token); $app['monolog.amazonpayments']->addInfo('AmazonRedirect::index end.'); return $app->redirect($app->url('amazon_shopping')."?access_token=".$access_token); } } 