<?php
 namespace Plugin\AmazonPayments\Controller\Admin; use Eccube\Application; use Eccube\Common\Constant; use Plugin\AmazonPayments\Form\Type\Admin\ConfigType; use Symfony\Component\Form\FormError; use Symfony\Component\Validator\Constraints as Assert; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\Yaml\Yaml; class ConfigController { private $app; private $const; public function index(Application $app, Request $request) { $this->app = $app; $this->const = $app['config']['AmazonPayments']['const']; $amazonSettings = $app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonSettings(true); $configFrom = new ConfigType($this->app, $amazonSettings); $form = $this->app['form.factory']->createBuilder($configFrom)->getForm(); if ('POST' === $request->getMethod()) { $form->handleRequest($request); if ($form->isValid()) { $formData = $form->getData(); if ($formData['amazon_account_mode'] == 1) { $arrTarget = array( 'seller_id' => '出品者ID', 'mws_access_key_id' => 'アクセスキー', 'mws_secret_access_key' => 'シークレットアクセスキー', 'client_id' => 'クライアントID', ); } else { $arrTarget = array('test_client_id' => 'テストクライアントID'); } $this->validateNotBlank($this->app['validator'], $form, $formData, $arrTarget, $app['monolog.amazonpayments']); if ($formData['prod_mode'] == 1) { $mode_change = $this->app['validator']->validateValue($formData['prod_key'], array( new Assert\NotBlank(), )); $mode_change = mb_substr($mode_change, mb_strpos($mode_change, ':') + 1); if (!empty($mode_change)) { $form['prod_key']->addError(new FormError($mode_change)); } else if (hash_hmac('md5', $formData['prod_key'], 'AmazonPay') !== 'c09930452808c907068fde78c4602215') { $form['prod_key']->addError(new FormError('本番環境切り替えキーは有効なキーではありません。')); } } if ($form->isValid()) { $app['eccube.plugin.amazonpayments.repository.amazon_info']->registerSettings($formData); $app->addSuccess('admin.register.complete', 'admin'); return $app->redirect($app['url_generator']->generate('plugin_AmazonPayments_config')); } } } $rootDirPath = __DIR__.'/../../../../..'; if (file_exists($rootDirPath.'/index.php')) { $returnFile = $rootDirPath.'/amazon_relay.html'; } else { $returnFile = $rootDirPath.'/html/amazon_relay.html'; } if (!file_exists($returnFile)) { $message = '戻り先のhtmlファイルが見つかりません。トラブルシューティングをご確認ください。'.$this->const['SUPPORT_URL']; $app->addWarning($message, 'admin'); } if ($app['config']['force_ssl'] != Constant::ENABLED) { $message = 'SSL対応が不十分な可能性があります。 設定 > システム情報設定 > セキュリティ管理 より "SSLを強制" にチェックを入れてください。'; $app->addWarning($message, 'admin'); } return $this->app['view']->render('AmazonPayments/Twig/admin/config.twig', array( 'form' => $form->createView(), )); } public function check(Application $app, Request $request) { $this->app = $app; $amazonSettings = $this->app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonSettings(); return $this->app['view']->render( 'AmazonPayments/Twig/admin/check.twig', array( 'amazonSettings' => $amazonSettings ) ); } public function widget(Application $app, Request $request) { $this->app = $app; $amazonSettings = $this->app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonSettings(); switch ($_POST['mode']) { case 'select_addr': $amznError = $app['eccube.plugin.amazonpayments.service.amazon_request']->getRequestResult($_POST['amazonOrderReferenceId'], $_POST['accessToken']); $error_msg = ''; if(!empty($amznError)) { $arrErr = json_decode(json_encode(simplexml_load_string($amznError)), true); $error_msg = $this->getErrorMsgByErrorCode($arrErr); } $arrResults['error_msg'] = $error_msg; return $app->json($arrResults, 200); break; default: break; } return $this->app['view']->render( 'AmazonPayments/Twig/admin/widget.twig', array( 'amazonSettings' => $amazonSettings ) ); } function validateNotBlank($validator, $form, $formData, $arrTarget, $log) { foreach ($arrTarget as $target => $name) { $rzlt = $this->app['validator']->validateValue($formData[$target], array( new Assert\NotBlank(), )); $rzlt = mb_substr($rzlt, mb_strpos($rzlt, ':') + 1); if (!empty($rzlt)) { $form[$target]->addError(new FormError('※ ' . $name . 'が入力されていません。')); } } } function getErrorMsgByErrorCode($arrErr) { $error_msg = ''; switch($arrErr['Error']['Code']) { case 'InvalidAccessKeyId': $error_msg = '「アクセスキーID」が間違っています。'; break; case 'SignatureDoesNotMatch': $error_msg = '「シークレットアクセスキー」が間違っています。'; break; default: $error_msg = 'エラーコード： ' . $arrErr['Error']['Code'] . '<br/>'; $error_msg .= 'エラーメッセージ： ' . $arrErr['Error']['Message']; break; } return $error_msg; } } 