<?php
 namespace Plugin\AmazonPayments\Controller; use Plugin\AmazonPayments\Entity\AmazonCustomer; use Plugin\AmazonPayments\Exception\AmazonException; use Plugin\AmazonPayments\Exception\AmazonPaymentException; use Plugin\AmazonPayments\Exception\AmazonSystemException; use Eccube\Application; use Eccube\Common\Constant; use Eccube\Controller\AbstractController; use Eccube\Entity\Customer; use Eccube\Entity\MailHistory; use Eccube\Event\EccubeEvents; use Eccube\Event\EventArgs; use Eccube\Exception\CartException; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken; class AmazonShoppingController extends AbstractController { private $sessionKey = 'eccube.front.shopping.nonmember'; private $sessionOrderKey = 'eccube.front.shopping.order.id'; private $sessionAmazonProfileKey = 'amazonpayments.profile'; private $sessionAmazonAccessTokenKey = 'amazonpayments.access_token'; private $sessionAmazonRequestKey = 'amazonpayments.shopping_request'; public function index(Application $app, Request $request) { $cartService = $app['eccube.service.cart']; $app['monolog.amazonpayments']->addInfo('AmazonShopping::index start.'); if (!$cartService->isLocked()) { return $app->redirect($app->url('cart')); } if (count($cartService->getCart()->getCartItems()) <= 0) { return $app->redirect($app->url('cart')); } $Order = $app['eccube.service.shopping']->getOrder($app['config']['order_processing']); if (is_null($Order)) { if (!$app->isGranted('IS_AUTHENTICATED_FULLY')) { $Customer = new Customer(); } else { $Customer = $app->user(); } try { $profile = unserialize($app['session']->get($this->sessionAmazonProfileKey)); $Order = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->createOrder($Customer, $profile); } catch (CartException $e) { $app->addRequestError($e->getMessage()); return $app->redirect($app->url('cart')); } $app['session']->remove($this->sessionOrderKey); } $app['orm.em']->refresh($Order); if (!$app->isGranted('IS_AUTHENTICATED_FULLY')) { $Customer = new Customer(); $Customer->setEmail($Order->getEmail()); $Pref = $app['eccube.repository.master.pref']->find(13); $Customer->setPref($Pref); $nonMember = array(); $nonMember['customer'] = $Customer; $nonMember['pref'] = $Customer->getPref()->getId(); $app['session']->set($this->sessionKey, $nonMember); } $builder = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->getShippingFormBuilder($Order); $event = new EventArgs( array( 'builder' => $builder, 'Order' => $Order, ), $request ); $app['eccube.event.dispatcher']->dispatch(EccubeEvents::FRONT_SHOPPING_INDEX_INITIALIZE, $event); $form = $builder->getForm(); if ($Order->getTotalPrice() < 0) { $message = $app->trans('shopping.total.price', array('totalPrice' => number_format($Order->getTotalPrice()))); $app['monolog.amazonpayments']->addError($message); return $app->redirect($app->url('shopping_error')); } $preOrderId = $cartService->getPreOrderId(); $app['monolog.amazonpayments']->addInfo('AmazonShopping::index end. pre_order_id = ' . $preOrderId); return $app->render('Shopping/index.twig', array( 'form' => $form->createView(), 'Order' => $Order, )); } public function confirm(Application $app, Request $request) { if (version_compare('3.0.11', Constant::VERSION, '<=')) { $request = $app['session']->get($this->sessionAmazonRequestKey); $app['session']->remove($this->sessionAmazonRequestKey); } $cartService = $app['eccube.service.cart']; $preOrderId = $cartService->getPreOrderId(); $amazonSettings = $app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonSettings(); $app['monolog.amazonpayments']->addInfo('AmazonShopping::confirm start. pre_order_id = ' . $preOrderId); if (!$cartService->isLocked()) { return $app->redirect($app->url('cart')); } $Order = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->getOrder($app['config']['order_processing']); if (!$Order) { $app->addError('front.shopping.order.error'); return $app->redirect($app->url('shopping_error')); } $AmazonPayment = $app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonPayment(); $Order->setPayment($AmazonPayment); $Order->setPaymentMethod($AmazonPayment->getMethod()); $builder = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->getShippingFormBuilder($Order); $event = new EventArgs( array( 'builder' => $builder, 'Order' => $Order, ), $request ); $app['eccube.event.dispatcher']->dispatch(EccubeEvents::FRONT_SHOPPING_CONFIRM_INITIALIZE, $event); $form = $builder->getForm(); $form->handleRequest($request); if ($form->isSubmitted() && $form->isValid()) { $data = $form->getData(); $profile = unserialize($app['session']->get($this->sessionAmazonProfileKey)); $arrAmazonInfo = array(); $em = $app['orm.em']; $em->getConnection()->beginTransaction(); if (!$app->isGranted('ROLE_USER')) { if ($amazonSettings['order_revise'] == 1) { $arrFixKana = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->reviseKana($Order->getName01(), $Order->getName02(), $Order->getEmail()); if (!empty($arrFixKana)) { $Order->setKana01($arrFixKana['kana01']) ->setKana02($arrFixKana['kana02']); } } if ($data['login_check'] == 0) { $arrAmazonInfo = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->registerCustomer($Order, $data, $profile); if ($arrAmazonInfo === false) { if (version_compare('3.0.11', Constant::VERSION, '<=')) { $app['session']->set($this->sessionAmazonRequestKey, $request); } return $app->render('Shopping/index.twig', array( 'form' => $form->createView(), 'Order' => $Order, )); } } else { $loginFlg = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->loginCustomer($Order, $data); if ($loginFlg === false) { if (version_compare('3.0.11', Constant::VERSION, '<=')) { $app['session']->set($this->sessionAmazonRequestKey, $request); } return $app->render('Shopping/index.twig', array( 'form' => $form->createView(), 'Order' => $Order, )); } } $Customer = $Order->getCustomer(); if (!empty($Customer)) { $token = new UsernamePasswordToken($Customer, null, 'customer', array('ROLE_USER')); $this->getSecurity($app)->setToken($token); $Order = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->copyToOrderFromCustomer($Order, $Customer); } } if ($app->isGranted('ROLE_USER')) { $app['monolog.amazonpayments']->addInfo('*** Amazonアカウント情報登録 start. ***'); $Customer = $Order->getCustomer(); $AmazonCustomer = $app['eccube.plugin.amazonpayments.repository.amazon_customer']->find($Customer->getId()); if (empty($AmazonCustomer)) { $AmazonCustomer = new AmazonCustomer(); $AmazonCustomer->setCustomer($Customer); $AmazonCustomer->setCustomerId($Customer->getId()); $AmazonCustomer->setAmazonUserId($profile->user_id); $app['orm.em']->persist($AmazonCustomer); $app['monolog.amazonpayments']->addInfo('*** 登録完了 ***'); } $app['monolog.amazonpayments']->addInfo('*** Amazonアカウント情報登録 end. ***'); } try { $amazonOrderReferenceId = $request->get('amazonOrderReferenceId'); $amazonTradingId = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->requestOrderToAmazon($Order, $amazonOrderReferenceId); $app['eccube.plugin.amazonpayments.service.amazon_shopping']->setAmazonOrder($Order, $amazonTradingId); $app['eccube.service.shopping']->setFormData($Order, $data); $app['eccube.service.shopping']->processPurchase($Order); if ($amazonSettings['sale'] == 2) { $Order->setPaymentDate(new \DateTime()); } $em->flush(); $em->getConnection()->commit(); } catch (AmazonPaymentException $e) { $app['monolog.amazonpayments']->addError('AmazonPaymentException.'); $error_title = '決済エラーが発生しました。'; $error_message = 'Amazonアカウントでのお支払い選択において問題が発生しました。他の支払方法を選択するか、クレジットカード情報を更新してください。'; return $app['view']->render('error.twig', compact('error_title', 'error_message')); } catch (AmazonSystemException $e) { $app['monolog.amazonpayments']->addError('AmazonSystemException.'); $error_title = '決済エラーが発生しました。'; $error_message = 'Amazon Payの決済処理に失敗したため、ご注文を処理することができませんでした。もう一度決済を試みてください。'; return $app['view']->render('error.twig', compact('error_title', 'error_message')); } catch (AmazonException $e) { $app->addError('front.shopping.system.error'); return $app->redirect($app->url('shopping_error')); } catch (ShoppingException $e) { $em->getConnection()->rollback(); $app->log($e); $app->addError($e->getMessage()); return $app->redirect($app->url('shopping_error')); } catch (\Exception $e) { $em->getConnection()->rollback(); $app->log($e); $app->addError('front.shopping.system.error'); return $app->redirect($app->url('shopping_error')); } $app['eccube.service.cart']->clear()->save(); $event = new EventArgs( array( 'form' => $form, 'Order' => $Order, ), $request ); $app['eccube.event.dispatcher']->dispatch(EccubeEvents::FRONT_SHOPPING_CONFIRM_PROCESSING, $event); if ($event->getResponse() !== null) { return $event->getResponse(); } $app['session']->set($this->sessionOrderKey, $Order->getId()); if (0 < mb_strlen($amazonSettings['mail_text'])) { $arrAmazonInfo['title']['name'] = ''; $arrAmazonInfo['title']['value'] = 'その他決済'; $arrAmazonInfo['remarks']['name'] = '特記事項'; $arrAmazonInfo['remarks']['value'] = $amazonSettings['mail_text']; } if (!empty($arrAmazonInfo)) { $MailHistory = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->sendOrderMail($Order, $arrAmazonInfo); } else { $MailHistory = $app['eccube.service.shopping']->sendOrderMail($Order); } $event = new EventArgs( array( 'form' => $form, 'Order' => $Order, 'MailHistory' => $MailHistory, ), $request ); $app['eccube.event.dispatcher']->dispatch(EccubeEvents::FRONT_SHOPPING_CONFIRM_COMPLETE, $event); if ($event->getResponse() !== null) { return $event->getResponse(); } $app['session']->remove($this->sessionAmazonAccessTokenKey); $app['monolog.amazonpayments']->addInfo('AmazonShopping::confirm end. pre_order_id = ' . $preOrderId); return $app->redirect($app->url('shopping_complete')); } return $app->render('Shopping/index.twig', array( 'form' => $form->createView(), 'Order' => $Order, )); } public function delivery(Application $app, Request $request) { if (version_compare('3.0.11', Constant::VERSION, '<=')) { $request = $app['session']->get($this->sessionAmazonRequestKey); $app['session']->remove($this->sessionAmazonRequestKey); } $cartService = $app['eccube.service.cart']; $preOrderId = $cartService->getPreOrderId(); $app['monolog.amazonpayments']->addInfo('AmazonShopping::delivery start. pre_order_id = ' . $preOrderId); if (!$cartService->isLocked()) { return $app->redirect($app->url('cart')); } $Order = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->getOrder($app['config']['order_processing']); if (!$Order) { $app->addError('front.shopping.order.error'); return $app->redirect($app->url('shopping_error')); } $builder = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->getShippingFormBuilder($Order); $form = $builder->getForm(); if ('POST' !== $request->getMethod()) { return $app->render('Shopping/index.twig', array( 'form' => $form->createView(), 'Order' => $Order, )); } $event = new EventArgs( array( 'builder' => $builder, 'Order' => $Order, ), $request ); $app['eccube.event.dispatcher']->dispatch(EccubeEvents::FRONT_SHOPPING_DELIVERY_INITIALIZE, $event); $form->handleRequest($request); if ($form->isSubmitted() && $form->isValid()) { $data = $form->getData(); $shippings = $data['shippings']; $productDeliveryFeeTotal = 0; $BaseInfo = $app['eccube.repository.base_info']->get(); foreach ($shippings as $Shipping) { $Delivery = $Shipping->getDelivery(); if ($Delivery) { $Pref = $Shipping->getPref(); if (empty($Pref)) { $Pref = $app['eccube.repository.master.pref']->find(13); } $deliveryFee = $app['eccube.repository.delivery_fee']->findOneBy(array( 'Delivery' => $Delivery, 'Pref' => $Pref )); if (!is_null($BaseInfo->getOptionProductDeliveryFee())) { $productDeliveryFeeTotal += $app['eccube.service.shopping']->getProductDeliveryFee($Shipping); } $Shipping->setDeliveryFee($deliveryFee); $Shipping->setShippingDeliveryFee($deliveryFee->getFee() + $productDeliveryFeeTotal); $Shipping->setShippingDeliveryName($Delivery->getName()); } } $message = $data['message']; $Order->setMessage($message); $Order->setDeliveryFeeTotal($app['eccube.service.shopping']->getShippingDeliveryFeeTotal($shippings)); $Order = $app['eccube.service.shopping']->getAmount($Order); $app['orm.em']->flush(); $event = new EventArgs( array( 'form' => $form, 'Order' => $Order, ), $request ); $app['eccube.event.dispatcher']->dispatch(EccubeEvents::FRONT_SHOPPING_DELIVERY_COMPLETE, $event); $app['monolog.amazonpayments']->addInfo('AmazonShopping::delivery end. pre_order_id = ' . $preOrderId); } return $app->render('Shopping/index.twig', array( 'form' => $form->createView(), 'Order' => $Order, )); } public function address(Application $app, Request $request) { $cartService = $app['eccube.service.cart']; $preOrderId = $cartService->getPreOrderId(); $app['monolog.amazonpayments']->addInfo('AmazonShopping::address start. pre_order_id = ' . $preOrderId); $Order = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->getOrder($app['config']['order_processing']); if (!$Order) { $app->addError('front.shopping.order.error'); return $app->redirect($app->url('shopping_error')); } $amazonOrderReferenceId = $request->get('amazonOrderReferenceId'); $addressConsentToken = $request->get('addressConsentToken'); if (empty($amazonOrderReferenceId) || empty($addressConsentToken)) { $app->addError('front.shopping.order.error'); return $app->redirect($app->url('shopping_error')); } $builder = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->getShippingFormBuilder($Order); $form = $builder->getForm(); $form->handleRequest($request); $data = $form->getData(); $message = $data['message']; $arrAmznAddr = $app['eccube.plugin.amazonpayments.service.amazon_request']->getDeliveryAddress($amazonOrderReferenceId, $addressConsentToken); $Shippings = $Order->getShippings(); foreach ($Shippings as $key => $Shipping) { $app['eccube.plugin.amazonpayments.service.amazon_shopping']->convertAddress($Order, $Shippings[$key], $arrAmznAddr); } if (!$app->isGranted('IS_AUTHENTICATED_FULLY')) { $app['eccube.plugin.amazonpayments.service.amazon_shopping']->copyToOrderFromShipping($Order, $Shippings[0]); } $Order->setMessage($message); $app['eccube.plugin.amazonpayments.service.amazon_shopping']->setShippingDeliveryFee($Shippings[0]); $Order = $app['eccube.service.shopping']->getAmount($Order); $app['orm.em']->flush(); $app['monolog.amazonpayments']->addInfo('AmazonShopping::address end. pre_order_id = ' . $preOrderId); return $app->render('Shopping/index.twig', array( 'form' => $form->createView(), 'Order' => $Order, )); } public function shoppingError(Application $app) { $app['monolog.amazonpayments']->addInfo('AmazonShopping::shoppingError'); return $app->render('Shopping/shopping_error.twig'); } } 