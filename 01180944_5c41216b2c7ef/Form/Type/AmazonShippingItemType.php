<?php
 namespace Plugin\AmazonPayments\Form\Type; use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\OptionsResolver\OptionsResolver; use Symfony\Component\Validator\Constraints as Assert; class AmazonShippingItemType extends AbstractType { public $app; public function __construct(\Eccube\Application $app) { $this->app = $app; } public function buildForm(FormBuilderInterface $builder, array $options) { $app = $this->app; $builder ->addEventListener(FormEvents::PRE_SET_DATA, function ($event) use ($app) { $data = $event->getData(); $form = $event->getForm(); $productTypes = $app['eccube.service.cart']->getProductTypes(); $AmazonPayment = $app['eccube.plugin.amazonpayments.repository.amazon_info']->getAmazonPayment(); $payments[0] = $AmazonPayment; $deliveryDates = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->getFormDeliveryDates($data->getOrder()); $delives = $app['eccube.plugin.amazonpayments.service.amazon_shopping']->getDeliveriesOrder($data->getOrder()); $deliveries = array(); foreach ($delives as $Delivery) { foreach ($data->getShipmentItems() as $item) { $productType = $item->getProductClass()->getProductType(); if ($Delivery->getProductType()->getId() == $productType->getId()) { $deliveries[] = $Delivery; } } } $deliveryTimes = null; $delivery = $data->getDelivery(); if ($delivery) { $deliveryTimes = $delivery->getDeliveryTimes(); } $form ->add('delivery', 'entity', array( 'class' => 'Eccube\Entity\Delivery', 'property' => 'name', 'choices' => $deliveries, 'data' => $delivery, 'constraints' => array( new Assert\NotBlank(), ), )) ->add('shippingDeliveryDate', 'choice', array( 'choices' => $deliveryDates, 'required' => false, 'empty_value' => '指定なし', 'mapped' => false, )) ->add('deliveryTime', 'entity', array( 'class' => 'Eccube\Entity\DeliveryTime', 'property' => 'deliveryTime', 'choices' => $deliveryTimes, 'required' => false, 'empty_value' => '指定なし', 'empty_data' => null, )); }) ->addEventListener(FormEvents::POST_SET_DATA, function (FormEvent $event) { $data = $event->getData(); $form = $event->getForm(); if (is_null($data)) { return; } $shippingDeliveryDate = $data->getShippingDeliveryDate(); if (!empty($shippingDeliveryDate)) { $form['shippingDeliveryDate']->setData($shippingDeliveryDate->format('Y/m/d')); } }) ->addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) { $data = $event->getData(); $form = $event->getForm(); $shippingDeliveryDate = $form['shippingDeliveryDate']->getData(); if (!empty($shippingDeliveryDate)) { $data->setShippingDeliveryDate(new \DateTime($form['shippingDeliveryDate']->getData())); } else { $data->setShippingDeliveryDate(null); } }) ->addEventSubscriber(new \Eccube\Event\FormEventSubscriber()); } public function configureOptions(OptionsResolver $resolver) { $resolver->setDefaults(array( 'data_class' => 'Eccube\Entity\Shipping', )); } public function getName() { return 'amazon_shipping_item'; } } 