<?php
 namespace Plugin\AmazonPayments\Form\Type; use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolver; use Symfony\Component\Validator\Constraints as Assert; class AmazonShoppingType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $payments = $options['payments']; $payment = $options['payment']; $message = $options['message']; $login_check = $options['login_check']; $customer_regist = $options['customer_regist']; $mail_magazine = $options['mail_magazine']; $amazon_login_email = $options['amazon_login_email']; $amazon_login_password = $options['amazon_login_password']; $builder ->add('payment', 'entity', array( 'class' => 'Eccube\Entity\Payment', 'property' => 'method', 'choices' => $payments, 'data' => $payment, 'expanded' => true, )) ->add('message', 'textarea', array( 'required' => false, 'data' => $message, 'constraints' => array( new Assert\Length(array('min' => 0, 'max' => 3000))), )) ->add('login_check', 'choice', array( 'choices' => array( 0 => 'まだ会員登録されていないお客様', 1 => '会員登録がお済みのお客様', ), 'data' => $login_check, 'expanded' => true, )) ->add('customer_regist', 'choice', array( 'choices' => array( 1 => 'ご利用規約に同意し、注文者情報を会員として登録する', ), 'multiple' => true, 'data' => $customer_regist, 'expanded' => true, )) ->add('mail_magazine', 'choice', array( 'choices' => array( 1 => 'メールマガジンを購読する', ), 'multiple' => true, 'data' => $mail_magazine, 'expanded' => true, )) ->add('amazon_login_email', 'text', array( 'label' => 'メールアドレス', 'attr' => array( 'class' => 'lockon_card_row', ), 'data' => $amazon_login_email, )) ->add('amazon_login_password', 'password', array( 'label' => 'パスワード', 'attr' => array( 'class' => 'lockon_card_row', ), 'always_empty' => false, 'data' => $amazon_login_password, )) ->addEventSubscriber(new \Eccube\Event\FormEventSubscriber()); } public function configureOptions(OptionsResolver $resolver) { $resolver->setDefaults(array( 'payments' => array(), 'payment' => null, 'message' => null, 'login_check' => 0, 'customer_regist' => array(1), 'mail_magazine' => array(1), 'amazon_login_email' => null, 'amazon_login_password' => null, )); } public function getName() { return 'amazon_shopping'; } } 