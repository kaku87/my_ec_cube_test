<?php
 namespace Plugin\AmazonPayments\ServiceProvider; use Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy; use Monolog\Handler\FingersCrossedHandler; use Monolog\Handler\RotatingFileHandler; use Monolog\Logger; use Silex\Application as BaseApplication; use Silex\ServiceProviderInterface; class AmazonPaymentsServiceProvider implements ServiceProviderInterface { public function register(BaseApplication $app) { $app->match('/' . $app["config"]["admin_route"] . '/plugin/AmazonPayments/config', '\\Plugin\\AmazonPayments\\Controller\\Admin\\ConfigController::index')->bind('plugin_AmazonPayments_config'); $app->match('/' . $app["config"]["admin_route"] . '/plugin/AmazonPayments/config/check', '\\Plugin\\AmazonPayments\\Controller\\Admin\\ConfigController::check')->bind('plugin_AmazonPayments_config_check'); $app->match('/' . $app["config"]["admin_route"] . '/plugin/AmazonPayments/config/widget', '\\Plugin\\AmazonPayments\\Controller\\Admin\\ConfigController::widget')->bind('plugin_AmazonPayments_config_widget'); $app->match('/amazon_redirect', '\Plugin\AmazonPayments\Controller\AmazonRedirectController::index')->bind('amazon_redirect'); $app->match('/amazon_shopping', '\Plugin\AmazonPayments\Controller\AmazonShoppingController::index')->bind('amazon_shopping'); $app->match('/amazon_shopping/address', '\Plugin\AmazonPayments\Controller\AmazonShoppingController::address')->bind('amazon_shopping_address'); $app->match('/amazon_shopping/confirm', '\Plugin\AmazonPayments\Controller\AmazonShoppingController::confirm')->bind('amazon_shopping_confirm'); $app->match('/amazon_shopping/delivery', '\Plugin\AmazonPayments\Controller\AmazonShoppingController::delivery')->bind('amazon_shopping_delivery'); $app->match('/amazon_shopping/customer', '\Plugin\AmazonPayments\Controller\AmazonShoppingController::customer')->bind('amazon_shopping_customer'); $app->match('/amazon_shopping/complete', '\Plugin\AmazonPayments\Controller\AmazonShoppingController::complete')->bind('amazon_shopping_complete'); $app->match('/amazon_shopping/shopping_error', '\Plugin\AmazonPayments\Controller\AmazonShoppingController::shoppingError')->bind('amazon_shopping_error'); $app['eccube.plugin.amazonpayments.service.amazon_request'] = $app->share(function () use ($app) { return new \Plugin\AmazonPayments\Service\AmazonRequestService($app); }); $app['eccube.plugin.amazonpayments.service.amazon_shopping'] = $app->share(function () use ($app) { return new \Plugin\AmazonPayments\Service\AmazonShoppingService($app, $app['eccube.service.cart'], $app['eccube.service.order']); }); $app['eccube.plugin.amazonpayments.service.amazon_mail'] = $app->share(function () use ($app) { return new \Plugin\AmazonPayments\Service\AmazonMailService($app); }); $app['eccube.plugin.amazonpayments.repository.amazon_status'] = $app->share(function () use ($app) { return $app['orm.em']->getRepository('Plugin\AmazonPayments\Entity\Master\AmazonStatus'); }); $app['eccube.plugin.amazonpayments.repository.amazon_customer'] = $app->share(function () use ($app) { return $app['orm.em']->getRepository('Plugin\AmazonPayments\Entity\AmazonCustomer'); }); $app['eccube.plugin.amazonpayments.repository.amazon_info'] = $app->share(function () use ($app) { $amazonInfoRepository = $app['orm.em']->getRepository('Plugin\AmazonPayments\Entity\AmazonInfo'); $amazonInfoRepository->setApplication($app); return $amazonInfoRepository; }); $app['eccube.plugin.amazonpayments.repository.amazon_order'] = $app->share(function () use ($app) { $amazonOrderRepository = $app['orm.em']->getRepository('Plugin\AmazonPayments\Entity\AmazonOrder'); $amazonOrderRepository->setApplication($app); return $amazonOrderRepository; }); $app['eccube.plugin.amazonpayments.repository.amazon_trading'] = $app->share(function () use ($app) { return $app['orm.em']->getRepository('Plugin\AmazonPayments\Entity\AmazonTrading'); }); $app['form.types'] = $app->share($app->extend('form.types', function ($types) use ($app) { $types[] = new \Plugin\AmazonPayments\Form\Type\AmazonShoppingType($app); return $types; })); $app['form.types'] = $app->share($app->extend('form.types', function ($types) use ($app) { $types[] = new \Plugin\AmazonPayments\Form\Type\AmazonShippingItemType($app); return $types; })); $app['monolog.amazonpayments'] = $app->share(function ($app) { $logger = new $app['monolog.logger.class']('AmazonPayments'); $file = $app['config']['root_dir'] . '/app/log/AmazonPayments.log'; $RotateHandler = new RotatingFileHandler($file, $app['config']['log']['max_files'], Logger::INFO); $RotateHandler->setFilenameFormat( 'AmazonPayments_{date}', 'Y-m-d' ); $logger->pushHandler( new FingersCrossedHandler( $RotateHandler, new ErrorLevelActivationStrategy(Logger::INFO) ) ); return $logger; }); } public function boot(BaseApplication $app) { } } ?>
